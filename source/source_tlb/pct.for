C+
C
C      PROGRAM *** PCT ***
C
C      WRITTEN BY K F HARTLEY AT RGO ON 27/4/81
C
C      VERSION #1
C
C      THIS PROGRAM TAKES IN UP TO 4 STARLINK FRAMES
C      AND COMPUTES THE SAME NUMBER OF OUTPUT FRAMES
C
C      THE OUTPUT FRAMES ARE THE "PRINCIPAL COMPONENT TRANSFORM"
C      OF THE INPUT FRAMES
C
C     THE FIRST OUTPUT FRAME IS THE LEAST CORRELATED (IE NOISE)
C      THE LAST IS THE MOST CORRELATED (IE THE INTENSITY)
C      INTERMEDIATE FRAMES GIVE COLOUR INFORMATION
C
C      THE TECHNIQUE DERIVES FROM WORK BY JEAN LORRE AT JPL
C
C-
      INTEGER AXIN(3),STATUS,PIN,POUT,PW
      INCLUDE 'INTERIM(ERRPAR)'
      INCLUDE 'INTERIM(FMTPAR)'
C
C      READ IN RAW DATA
C
      CALL WRUSER('ENTER UP TO 4 FRAMES , ALL THE SAME SIZE',STATUS)
      DO 100 IN=1,4
         CALL RDIMAG('INPUT',FMT_R,3,AXIN,IDIM,PIN,STATUS)
C
C      EXIT IF A REAL ERROR OCCURED
C
           IF (STATUS.GT.ERR_PARNUL) THEN
              CALL WRERR('HELLIN')
              CALL FRDATA(' ',STATUS)
              CALL EXIT
           END IF
C
C      COME OUT OF LOOP IF A NULL RESPONSE WAS ENTERED
C
        IF (STATUS.EQ.ERR_PARNUL) THEN
            CALL WRUSER('NO MORE INPUT FRAMES',STATUS)
            NIN=IN-1
            GO TO 120
        END IF
C
C     IF INPUT IS OK AND THE FIRST ONE......
C      ... OBTAIN SOME WORK SPACE FOR ALL THE DATA
C
      IF (STATUS.EQ.ERR_NORMAL.AND.IN.EQ.1) THEN
         NSAMP=AXIN(1)*AXIN(2)*AXIN(3)
         NWORK=NSAMP*4
         CALL GETDYN('WORK',FMT_R,NWORK,PW,STATUS)
C
C      IF THIS DOESNT WORK THEN THERE IS NO HOPE , SO EXIT
C
         IF (STATUS.NE.ERR_NORMAL) THEN
            CALL WRERR('HELLWORK')
            CALL FRDATA(' ',STATUS)
            CALL EXIT
         END IF
      END IF
C
C      IF IT GETS HERE THE DATA SHOULD BE OK
C      SO STUFF IT INTO THE WORK SPACE
C
         CALL SHOVE(%VAL(PIN),%VAL(PW),4,NSAMP,IN)
C
C      NOW CANCEL THE CURRENT INPUT FRAME
C      AND GO BACK FOR THE NEXT ONE
C
         CALL FRDATA('INPUT',STATUS)
         CALL CNPAR('INPUT',STATUS)
  100 CONTINUE
C
C      IF FOUR FRAMES WERE INPUT
C
      NIN=4
C
C      IF NOT COMES OUT OF THE DO-LOOP (100) TO HERE
C
  120 CONTINUE
C
C      NOW CHECK THAT A REASONABLE NUMBER OF FRAMES WERE INPUT
C
      IF (NIN.LT.2) THEN
         CALL WRERR('HELLSM')
         CALL FRDATA(' ',STATUS)
         CALL EXIT
      END IF
C
C      NOW GO AND DO THE WORK
C
      CALL PCT(%VAL(PW),4,NSAMP,NIN)
C
C      AND PICK OUT THE RESULTS
C
      DO 200 IOUT=1,NIN
         CALL WRIMAG('OUTPUT',FMT_R,AXIN,IDIM,POUT,STATUS)
         IF (STATUS.NE.ERR_NORMAL) THEN
            CALL WRERR('HELLOUT')
            CALL FRDATA(' ',STATUS)
            CALL EXIT
         END IF
         CALL PULL(%VAL(POUT),%VAL(PW),4,NSAMP,IOUT)
C
C      HAVING PULLED OUT ONE FRAME
C      CLEAR "OUTPUT" AND GET ANOTHER ONE
C
         CALL FRDATA('OUTPUT',STATUS)
         CALL CNPAR('OUTPUT',STATUS)
  200 CONTINUE
C
C      NOW TIDY UP EVERYTHING AND GO HOME
C
      CALL FRDATA(' ',STATUS)
      CALL EXIT
      END
      SUBROUTINE SHOVE (IN,WORK,N,M,IPOS)
C
C      THIS ROUTINE TAKES A 1D ARRAY ( IN(M) )
C      AND PUTS IT INTO THE IPOS POSITION
C      IN A 2D ARRAY (WORK(N,M) )
C
      REAL IN(M),WORK(N,M)
      DO 100 I=1,M
         WORK(IPOS,I)=IN(I)
  100 CONTINUE
      RETURN
      END
      SUBROUTINE PULL(OUT,WORK,N,M,IPOS)
C
C      THIS PULLS A 1D ARRAY ( OUT(M) )
C      FROM THE IPOS POSITION
C      IN A 2D ARRAY ( WORK(N,M) )
C
      REAL OUT(M),WORK(N,M)
      DO 100 I=1,M
         OUT(I)=WORK(IPOS,I)
  100 CONTINUE
      RETURN
      END
      SUBROUTINE PCT(WORK,N,M,NUSED)
C
C      THIS ROUTINE  COMPUTES THE
C      PRINCIPAL COMPONENT TRANSFORMATION
C      OF DATA STORED IN A 2D ARRAY WORK
C
C      THE DATA ARE STORED AS 1D ARRAYS AND THERE ARE
C      NUSED OF THEM UP TO A MAXIMUM OF N
C
C      THE RESULTS ARE STORED IN THE SAME ARRAY AS THE INPUT
C
C      THE TECHNIQUE IS BASED ON A JPL REPORT BY
C      JEAN LORRE AND IS RELATED TO THE
C      THE KARHUNEN-LOEVE TRANSFORM
C      AS DISCUSSED IN THE LITERATURE
C
C      THE IDEA IS THAT THE MATRIX WHICH DIAGONALIZES
C      THE COVARIANCE MATRIX OF THE INPUT DATA
C      MAY BE USED TO TRANSFORM THE INPUT FRAMES
C      INTO NEW FRAMES WHICH ARE RANKED ACCORDING
C      TO THE DEGREE OF CORRELATION BETWEEN THE INPUT FRAMES
C
C      THIS SHOULD BE OF VALUE (1) IN LOOKING AT COLOUR
C                                  VARIATIONS IN 2D IMAGES
C                              (2) IN ADDING FRAMES IN A NOISE
C                                  FREE WAY
C                              (3) IN ANALYSING MULTI-SPECTRAL
C                                  STELLAR PHOTOMETRY
C
C
      REAL WORK(N,M)
      REAL*8 COV(4,4),AVE(4),TEMP(4)
      REAL*8 EIVALS(4),EIVECS(4,4),E(4)
C
C      FIRST FORM THE MEANS OF THE INPUT FRAMES
C
      DO 100 I=1,NUSED
         AVE(I)=0.0
  100 CONTINUE
      DO 120 J=1,M
         DO 110 I=1,NUSED
            AVE(I)=AVE(I)+DBLE(WORK(I,J))
  110    CONTINUE
  120 CONTINUE
      DO 130 I=1,NUSED
         AVE(I)=AVE(I)/REAL(M)
  130 CONTINUE
C
C      THE COVARIANCE MATRIX IS SCALED BY THE NUMBER OF
C      ELEMENTS GOING TO FORM IT.
C
      FACTOR=1.0/DBLE(M)
C
C      NOW COMPUTE THE COVARIANCE MATRIX
C
      DO 210 J=1,4
         DO 200 I=1,4
            COV(I,J)=0.0
  200    CONTINUE
  210 CONTINUE
      DO 250 K=1,M
         DO 240 J=1,NUSED
            DO 220 I=J,NUSED
               COV(I,J)=COV(I,J)+DBLE(WORK(I,K)-AVE(I))*
     1                           DBLE(WORK(J,K)-AVE(J))
  220       CONTINUE
  240    CONTINUE
  250 CONTINUE
C
C      NOTE THAT ONLY ONE LOT OF OFF-DIAGONAL ELEMENTS
C      HAS BEEM COMPUTED
C
C      THE OTHERS ARE JUST THE SAME , AS THE COVARIANCE
C      MATRIX IS A REAL , SYMMETRIC MATRIX
C
C      NOTE THAT THIS GUARANTEES THAT IT HAS REAL EIGENVECTORS
C
      DO 270 J=1,4
         DO 260 I=J,4
C
C      AT THE SAME TIME THE MATRIX IS NORMALISED
C      BY DIVIDING BY THE NUMBER OF PIXELS USED
C
            COV(I,J)=COV(I,J)*FACTOR
            COV(J,I)=COV(I,J)
  260    CONTINUE
  270 CONTINUE
C
C      NOW COMPUTE THE EIGENVALUES AND EIGENVECTORS OF
C      THE COVARIANCE MATRIX , BY USING THE NAG ROUTINE
C      F02ABF ...... SEE NAG MANUAL
C
      IFAIL=0
      CALL F02ABF(COV,4,NUSED,EIVALS,EIVECS,4,E,IFAIL)
      IF (IFAIL.NE.0) THEN
         CALL WRUSER('F02ABF FAILED',ISTAT)
         RETURN
      END IF
C
C      THE EIGENVECTORS ARE STORED IN THE COLUMNS
C      OF THE ARRAY EIVECS
C      THEY ARE NOW USED TO COMPUTE THE OUTPUT VALUES
C
C
C      POSSIBLE FIDDLE TO GET DIRECTION OF EIGENVECTORS
C      IN THE "RIGHT" DIRECTION
C      IE TO GIVE A POSITVE MOST CORRELATED IMAGE
C
      DO 299 J=1,NUSED
         IF (EIVECS(J,J).LT.0.0) THEN
            DO 298 I=1,NUSED
               EIVECS(I,J)=-1.0*EIVECS(I,J)
  298       CONTINUE
         END IF
  299 CONTINUE
      DO 400 I=1,M
         DO 350 J=1,NUSED
         TEMP(J)=0.0
            DO 300 K=1,NUSED
               TEMP(J)=   TEMP(J)+REAL(WORK(K,I))*EIVECS(K,J)
  300       CONTINUE
  350    CONTINUE
C
C      NOTE THE USE OF THE ARRAY TEMP FOR TEMPORARY STORAGE
C      OF THE RESULTS .
C      THEY CAN NOW BE COPIED INTO THE WORK ARRAY
C      THIS IS TO ENSURE THAT ONL "OLD" VALUES ARE
C      USED TO COMPUTE THE "NEW" ONES.
C
         DO 370 J=1,NUSED
            WORK(J,I)=INT(TEMP(J))
  370    CONTINUE
  400 CONTINUE
      RETURN
      END
