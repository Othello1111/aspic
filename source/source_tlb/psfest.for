      PROGRAM PSFEST
C
C+  PROGRAM PSFEST - PROGRAM TO ESTIMATE POINT SPREAD FUNCTIONS FROM
C   STARS IN AN IMAGE (THE IMAGE MUST BE DISPLAYED, BUT NEED NOT BE
C   THE MOST RECENTLY DISPLAYED IMAGE.)
C
C   PARAMETERS
C   INPUT    INPUT IMAGE
C   SIZE     SIZE OF OUTPUT IMAGE ( IT MUST BE AN ODD INTEGER)
C   OUTPUT   OUTPUT IMAGE
C
C   THE USER USES THE TRACKERBALL BUTTONS (THE WHITE ONES - NOS 2 AND 3)
C   TO ADJUST THE SIZE OF A BOX, WHICH INDICATES THE REGION WHICH IS TO
C   BE EXTRACTED FROM THE INPUT IMAGE. THE STAR CENTRE IS DETERMINED ON
C   THE BASIS OF THIS REGION AND THEN ANOTHER REGION OF THE SAME SIZE,
C   BASED THIS TIME ON THE ACCURATE CENTRE POSITION, IS EXTRACTED. THIS
C   SUBIMAGE IS THEN SMOOTHED, BACKGROUND SUBTRACTED AND SURROUNDED BY
C   ZEROES IF SMALLER THAN THE OUTPUT ARRAY.
C
C   THE METHOD USED FOR LOCATING THE STAR CENTRE IS CONTAINED IN A ROUTINE
C   BY PTW - SEE PROGRAM 'STAR' (IT CALCULATES THE CENTROID NOT THE MODE)
C
C   TRACKERBALL BUTTONS
C   1   GREEN   ACCEPT POINT AS ESTIMATE OF STAR CENTRE
C   2   WHITE   DECREASE SIZE OF BOX SURROUNDING STAR
C   3   WHITE   INCREASE SIZE OF BOX SURROUNDING STAR
C   4   RED     SAME AS GREEN (STOP IS THE SAME AS GO!)
C
C   WFL RGO MAR 81 - MODIF SEP 1981 TO USE ARGS CURSOR / DATABASE
C
      INCLUDE 'INTERIM(ERRPAR)'
      INCLUDE 'INTERIM(FMTPAR)'
      INTEGER STATUS,AXIS(2),NAXIS,INPTR,SIZE(2),I,OUTPTR
C
C   ALLOCATE ARGS AND RESET VSR
C
      CALL SRINIT (0,.FALSE.,STATUS)
      IF (STATUS.NE.0) THEN
          CALL WRERR ('NOARGS')
          GOTO 999
      ENDIF
      CALL ARGS_VSRRST
C
C   READ THE INPUT FRAME
C
      CALL RDIMAG ('INPUT',FMT_R,2,AXIS,NAXIS,INPTR,STATUS)
      IF (STATUS.NE.ERR_NORMAL) THEN
          CALL WRERR ('RDINP')
          GOTO 999
      ENDIF
      IF (NAXIS.NE.2) THEN
          CALL WRERR ('BADINP')
          GOTO 999
      ENDIF
C
C   CALL SUBROUTINE PSFES2 TO SELECT A STAR AND GAIN AN
C   ESTIMATE OF THE PSF FROM IT. FIRST OF ALL, DISCOVER WHICH
C   DIMENSIONS THE OUTPUT IMAGE IS TO BE.
C   MAY NEED THE STAR IMAGE ZERO-EXTENDING BUT THIS WILL BE HANDLED
C
      CALL RDKEYI ('SIZE',.FALSE.,2,SIZE,I,STATUS)
      IF (STATUS.NE.ERR_NORMAL) THEN
          CALL WRERR ('RDSIZ')
          GOTO 999
      ENDIF
      DO I=1,2
          IF (MOD (SIZE (I),2) .EQ.0) THEN
              CALL WRERR ('BADSIZ')
              GOTO 999
          ENDIF
      ENDDO
C
C   GET OUTPUT FRAME AND CALL PSFES2
C
      CALL WRIMAG ('OUTPUT',FMT_R,SIZE,2,OUTPTR,STATUS)
      IF (STATUS.NE.ERR_NORMAL) THEN
          CALL WRERR ('WROUT')
          GOTO 999
      ENDIF
      CALL PSFES2 (AXIS (1) ,AXIS (2) ,%VAL (INPTR) ,SIZE (1) ,
     :    SIZE (2) ,%VAL (OUTPTR) )
C
C   FREE DATA AND STOP
C
999   CALL FRDATA (' ',STATUS)
      CALL ARGS_OVCL (8,.FALSE.)
      END
C
      SUBROUTINE PSFES2 (INX,INY,INPUT,OUTX,OUTY,OUTPUT)
C
C   ALLOW USER TO DEFINE POINT AS HIS ESTIMATE OF POSITION OF STAR
C   POSITION, THEN LOCATE STAR ACCURATELY, SMOOTH, SUBTRACT BACK-
C   GROUND AND WRITE TO OUTPUT ARRAY
C
C   ARGUMENTS
C   INX/Y    I   DIMS OF INPUT
C   INPUT    R   INPUT ARRAY
C   OUTX/Y   I   DIMS OF OUTPUT (BOTH POWERS OF TWO)
C   OUTPUT   R   OUTPUT ARRAY
C
C   WFL RGO MAR 1981
C
      INTEGER INX,INY,OUTX,OUTY,MAXPRT,OXB2,OYB2,SX,SY,IB,ID,I,J
      PARAMETER (MAXPRT=49)
      REAL INPUT(INX,INY),OUTPUT(-OUTX/2:OUTX/2,-OUTY/2:OUTY/2),
     :    X,Y,PART(MAXPRT,MAXPRT),WORK(MAXPRT),XFINE,YFINE,TINT,FWHM,
     :    BL,BR,TR,TL,FX,FY,PSFES5
      OXB2=OUTX/2
      OYB2=OUTY/2
C
C   ENTER THE CURSOR CONTROL LOOP
C
C   IB = 1 GREEN ACCEPT POINT
C   IB = 2 WHITE DECREASE BOX SIZE
C   IB = 3 WHITE INCREASE BOX SIZE
C   IB = 4 RED   ACCEPT POINT (SAME AS 1)
C
      SX = MIN (MAXPRT/2+1-MOD (MAXPRT/2,2),OUTX)
      SY = MIN (MAXPRT/2+1-MOD (MAXPRT/2,2),OUTY)
      IB = 0
      CALL ARGS_CUROP ('1234','W')
      CALL ARGS_OVOP (8,'Y')
      DO WHILE (IB.NE.1.AND.IB.NE.4)
          CALL ARGS_RDCUR ('IMAG',ID,IB,X,Y)
C
C   CHECK AN IMAGE WAS HIT AND IF SO DRAW BOX ON ARGS
C
          IF (ID.GT.0) THEN
              IF (IB.EQ.2) THEN
                  SX=MAX (SX-4,5)
                  SY=MAX (SY-4,5)
              ELSE IF (IB.EQ.3) THEN
                  SX=MIN (SX+4,OUTX,MAXPRT)
                  SY=MIN (SY+4,OUTY,MAXPRT)
              ENDIF
              CALL PSFES6 (ID,X,Y,SX,SY)
          ENDIF
      ENDDO
      CALL ARGS_CURCL
C
C   (X,Y) IS THE MANUALLY SELECTED STAR CENTRE. COPY THE
C   APPROPRIATE PORTION OF INPUT INTO 'PART' AND USE SUBROUTINE
C   'STAR' TO FIND THE CENTRE MORE ACCURATELY
C
      CALL PSFES3 (INX,INY,INPUT,X,Y,MAXPRT,SX,SY,PART)
      CALL STAR (PART,SX,SY,WORK,XFINE,YFINE,TINT,FWHM)
C
C   XFINE,YFINE ARE IN UNITS RELATIVE TO PART, SO CONVERT SO THAT
C   THEY ARE RELATIVE TO THE BOTTOM LEFTHAND CORNER OF INPUT
C
      XFINE=X+XFINE-SX/2
      YFINE=Y+YFINE-SY/2
C
C   DRAW THE MORE ACCURATELY SITED RECTANGLE ON THE ARGS
C
      CALL PSFES6 (ID,XFINE,YFINE,SX,SY)
C
C   SHIFT THE STAR IMAGE INTO 'PART' AGAIN, BUT THIS TIME
C   MORE ACCURATELY CENTRED
C
      CALL PSFES3 (INX,INY,INPUT,XFINE,YFINE,MAXPRT,SX,SY,PART)
C
C   SMOOTH 'PART' INTO OUTPUT USING A 3*3 SLIDING MEAN FILTER
C
      CALL PSFES4 (MAXPRT,SX,SY,PART,OUTX,OUTY,OUTPUT)
C
C   ESTIMATE THE BACKGROUND BY USING THE CORNER POINTS OF
C   OUTPUT AND ASSUMING LINEARITY, AND SUBTRACT IT
C
      BL=OUTPUT (1-SX/2,1-SY/2)
      BR=OUTPUT (SX/2-1,1-SY/2)
      TR=OUTPUT (SX/2-1,SY/2-1)
      TL=OUTPUT (1-SX/2,SY/2-1)
      DO I=2,SY-1
          ITEM=I-SY/2-1
          FY=REAL (I-2) /REAL (SY-3)
          DO J=2,SX-1
              JTEM=J-SX/2-1
              FX=REAL (J-2) /REAL (SX-3)
              OUTPUT (JTEM,ITEM) =OUTPUT (JTEM,ITEM) -PSFES5 (BL,
     :        BR,TR,TL,FX,FY)
          ENDDO
      ENDDO
C
C   AND FILL ALL THAT OF OUTPUT WHICH HAS NOT BEEN ALTERED
C  (INCLUDING THE UNSMOOTHED 'RIM') WITH ZEROES
C
      DO I=-OYB2,OYB2
          DO J=-OXB2,OXB2
              IF (ABS (I) .GE.SX/2.OR.ABS (J) .GE.SY/2) THEN
                  OUTPUT (J,I) =0
              ENDIF
          ENDDO
      ENDDO
      END
C
      SUBROUTINE PSFES3 (INX,INY,INPUT,X,Y,MAXPRT,SX,SY,PART)
C
C   ROUTINE TO SHIFT PART OF THE REAL ARRAY INPUT INTO THE REAL ARRAY
C   'PART' SUCH THAT THE CENTRAL ELEMENT OF PART (ITS DIMENSIONS ARE
C   ODD) IS AT POSITION (X,Y) IN INPUT. THE BOTTOM LEFTHAND CORNER
C   OF PART OF SIZE SX*SY IS THAT WHICH IS FILLED
C
      INTEGER INX,INY,MAXPRT,SX,SY,I,IL,IH,J,JL,JH
      REAL INPUT(INX,INY),X,Y,PART(MAXPRT,MAXPRT),FI,FJ,INPLL,INPHL,
     :    INPHH,INPLH,PSFES5
      FI=Y-INT (Y)
      FJ=X-INT (X)
      DO I=1,SY
          IL=Y-SY/2+I-1
          IH=IL+1
          DO J=1,SX
              JL=X-SX/2+J-1
              JH=JL+1
              INPLL=INPUT (JL,IL)
              INPHL=INPUT (JH,IL)
              INPHH=INPUT (JH,IH)
              INPLH=INPUT (JL,IH)
              PART (J,I) =PSFES5 (INPLL,INPHL,INPHH,INPLH,
     :        FJ,FI)
          ENDDO
      ENDDO
      END
C
      SUBROUTINE PSFES4 (MAXPRT,SX,SY,PART,OUTX,OUTY,OUTPUT)
C
C   ROUTINE TO SMOOTH (USING A 3*3 RECT CONVOLVING FUNCTION)
C   THE REAL ARRAY PART (THE SX*SY BOTTOM LEFTHAND CORNER) INTO
C   THE REAL ONE OUTPUT
C
C   RGO WFL MAR 81
C
      INTEGER MAXPRT,SX,SY,OUTX,OUTY,I,ITEM,J,JTEM,K,L
      REAL PART(MAXPRT,MAXPRT),OUTPUT(-OUTX/2:OUTX/2,-OUTY/2:OUTY/2),R
      DO I=2,SY-1
          ITEM=I-SY/2-1
          DO J=2,SX-1
              JTEM=J-SX/2-1
              R=0.0
              DO K=-1,1
                  DO L=-1,1
                      R=R+PART (J+L,I+K)
                  ENDDO
              ENDDO
              OUTPUT (JTEM,ITEM) =R/9.0
          ENDDO
      ENDDO
      END
C
      REAL FUNCTION PSFES5 (BL,BR,TR,TL,FX,FY)
C
C   ROUTINE TO EVALUATE A 2D FUNCTION USING BILINEAR INTERPOLATION
C   GIVEN:-
C
C   ARGUMENTS
C   BL    REAL       VALUE AT BOTTOM LEFTHAND OF A BOX
C   BR    REAL                BOTTOM RIGHT
C   TR    REAL                TOP    RIGHT
C   TL    REAL                TOP    LEFT
C   FX    REAL       FRACTION ALONG BOX IN X DIRN
C   FY    REAL                             Y
C
C   RGO WFL MAR 81
C
      REAL BL,BR,TR,TL,FX,FY,FXC,FYC
      FXC=1.0-FX
      FYC=1.0-FY
      PSFES5=BL*FXC*FYC+BR*FX*FYC+TR*FX*FY+TL*FXC*FY
      END
C
      SUBROUTINE PSFES6 (ID,X,Y,SX,SY)
C
C   ROUTINE TO DRAW A BOX OF SIZE (SX,SY), CENTRED AT (X,Y) (ALL IN USER
C   UNITS FOR IMAGE 'ID' BUT NOTE THAT (SX,SY) ARE INTEGERS)
C
      INTEGER ID,SX,SY,STATUS
      REAL X,Y,XVAL (5) ,YVAL (5)
      XVAL (1) = X - SX/2
      YVAL (1) = Y - SY/2
      XVAL (2) = X + SX/2
      YVAL (2) = YVAL (1)
      XVAL (3) = XVAL (2)
      YVAL (3) = Y + SY/2
      XVAL (4) = XVAL (1)
      YVAL (4) = YVAL (3)
      XVAL (5) = XVAL (1)
      YVAL (5) = YVAL (1)
C
      CALL ARGS_CLS (8)
      CALL ARGS_POLYL (ID,5,XVAL,YVAL,STATUS)
C
      END
