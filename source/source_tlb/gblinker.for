	PROGRAM GBLINKER

*+
*
*  - - - - - - - - - -
*  : G B L I N K E R :
*  - - - - - - - - - -
*
*
*   ARGS TRACKERBALL/CURSOR BLINK TWO 8 BIT IMAGES
*
*
*	EXECUTION CONTINUES UNTIL BUTTON 4 IS PRESSED
*
*	BUTTON 2 DISPLAYS THE FIRST IMAGE  (RESETS AUTO BLINK RATE)
*	BUTTON 3 DISPLAYS THE SECOND IMAGE  (RESETS AUTO BLINK RATE)
*	BUTTON 1 AUTO BLINK - BLINK RATE HALVED EACH TIME BUTTON PRESSED
*
*	THE SECOND IMAGE MAY BE MOVED RELATIVE TO THE FIRST
*	IMAGE BY MEANS OF THE TRACKER BALL
*
*	RETURNED
*
*	IX,IY POSITION OF THE FIRST IMAGE RELATIVE TO THE SECOND IMAGE
*
*
*    D.J.KING   R.G.O.   OCT 81
*
*-
	INTEGER IDMAX,STATUS,ID,AX,AY,DIM(2),PICT
	INTEGER*2 ARGSIN(4),DATA(3)
      INCLUDE 'INTERIM(FMTPAR)'
	REAL UX,UY
	CHARACTER VALUE*80

* CHECK DATABASE TO FIND IF ANYTHING IS DISPLAYED
	CALL ARGS_NUMIM(IDMAX)
	IF (IDMAX.EQ.O) THEN
		CALL WRERR('NOIMS')
	ELSE

*  ALLOCATE ARGS
		CALL SRINIT(0,.FALSE.,STATUS)
		IF (STATUS.NE.0) THEN
			CALL WRERR('NOARGS')
		ELSE

*  SET SYSTEM CURSOR
			CALL ARGS_CURS('+')
			CALL ARGS_CURC('I')

*  CENTRE CURSOR
			CALL ARGS_CURP(0,255,255)


*  LOAD GBLINKER PROGRAM INTO ARGS
			CALL LOAD_GBLINK

*  SWITCH ON LAMPS
			CALL ARGS_LAMPS(1,1,1,1)

			CALL RDIMAG('LUT1',FMT_SW,2,DIM,JUNK,LPTR1,STATUS)
			CALL RDIMAG('LUT2',FMT_SW,2,DIM,JUNK,LPTR2,STATUS)

* GET INFORMATION ON LAST IMAGE DISPLAYED FROM DATABASE

		CALL ARGS_RDPAR('DISPZOOM',1,VALUE,NVALS,STATUS)
		CALL ASP_DZTOI('ZXC',VALUE,IXC,STATUS)
		CALL ASP_DZTOI('ZYC',VALUE,IYC,STATUS)
		CALL ASP_DZTOI('ZXF',VALUE,IXF,STATUS)
		CALL ASP_DZTOI('ZYF',VALUE,IYF,STATUS)

		IF (IXF.EQ.0) THEN
			IXF=1
			IYF=1
			IXC=256
			IYC=256
		ENDIF

* SET UP INFORMATION TO SEND TO ARGS PROGRAM

		ARGSIN(1) = IXF-1
		ARGSIN(2) = IYF-1
		ARGSIN(3) = IXC
		ARGSIN(4) = IYC

			CALL LDATA(%VAL(LPTR1),%VAL(LPTR2),ARGSIN(1),ARGSIN(2),
     1					ARGSIN(3),ARGSIN(4))
			CALL RUN_GBLINK
			CALL READ_GBLINK(DATA)
			AX=DATA(1)-256
			AY=DATA(2)-256
			PICT=DATA(3)

*  SWITCH OFF LAMPS
			IF (PICT.EQ.1) CALL ARGS_LAMPS(0,1,0,0)
			IF (PICT.EQ.2) CALL ARGS_LAMPS(0,0,1,0)
*  DISABLE CURSOR
			CALL ARGS_CURS('0')
			CALL SRSEND
*
			CALL WRKEYI ('AX',AX,1,STATUS)
			CALL WRKEYI ('AY',AY,1,STATUS)
			CALL WRKEYI ('PICT',PICT,1,STATUS)
		ENDIF
	ENDIF

	END


	SUBROUTINE LDATA(L1,L2,XZOOM,YZOOM,XZP,YZP)
	INTEGER*2 XZOOM,YZOOM,XZPOS,YZPOS,XZP,YZP
	BYTE VLUT(4,514),L1(6,256),L2(6,256),TEMP
	EQUIVALENCE (VLUT(1,514),XZPOS),(VLUT(3,514),YZPOS)
	XZPOS=XZP
	YZPOS=YZP
	DO I=1,256
	VLUT(1,I)=L1(1,I)
	VLUT(2,I)=L1(3,I)
	VLUT(3,I)=L1(5,I)
	VLUT(4,I)=0
	VLUT(1,I+256)=L2(1,I)
	VLUT(2,I+256)=L2(3,I)
	VLUT(3,I+256)=L2(5,I)
	VLUT(4,I+256)=0
	END DO
	VLUT(1,513)=YZOOM
	VLUT(2,513)=0
	VLUT(3,513)=0
	VLUT(4,513)=XZOOM
	CALL WRITE_GBLINK(VLUT)
	RETURN
	END

