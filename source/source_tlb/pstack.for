C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C      ******************
C      *                *
C      * PROGRAM PSTACK *
C      *                *
C      ******************
C
C
C
C      CALLING SEQUENCE:-
C              PSTACK
C
C
C      FUNCTION:-
C         This is a version of the EDRS program STACK.
C         This program adds together images which are mutually
C         aligned and normalised, though they can have different noise
C         levels. The adding can be done in a variety of useful ways.
C
C
C      USER PARAMTERS
C
C      IM1,IM2,IM3,,,                           The input images. End
C                                               the input by typing a
C                                               blank line.
C
C      ER1,ER2,ER3,,,                           Input estimates of the
C                                               image noises
C
C      METHOD                                   Stacking method. For a
C                                               description see the EDRS
C                                               manual on STACK.
C
C      MINIMAGE                                 Minimum no of good images
C                                               required at a point to give
C                                               a resulting value.
C
C      OUT                                      Name of file to write
C                                               output image to
C
C      TITLE                                    Title to add to Output file.
C
C
C
C     A J PENNY    from  RF WARREN-SMITH          RGO        82-NOV
C----------------------------------------------------------------------
C
C
C PURPOSE
C 	TO COMBINE MUTUALLY ALIGNED AND NORMALISED IMAGES INTO A
C 	SINGLE OUTPUT IMAGE
C
C METHOD
C 	OBTAIN EACH INPUT IMAGE AND EXTRACT THE REQUIRED DESCRIPTOR
C 	ITEMS. OBTAIN AN OUTPUT IMAGE. TREAT EACH LINE IN TURN...
C 	COPY ONE LINE FROM EACH IMAGE INTO WORKSPACE USING LINSTK, THEN
C 	COMBINE THEM INTO A SINGLE OUTPUT LINE USING COMBIN. WHEN ALL
C 	LINES HAVE BEEN TREATED, UPDATE THE OUTPUT DESCRIPTOR ITEMS
C
C ARGUMENTS
C 	NONE
C
C STARLINK PARAMETERS
C 	IM1,IM2...IM20
C 		THE INPUT IMAGES
C 	NOSPACE/ERROR/
C 		ACCESSED IF WORKSPACE CANNOT BE OBTAINED
C 	OUT
C 		THE OUTPUT IMAGE
C 	METHOD
C 		THE METHOD OF COMBINING THE IMAGES
C     ER1,ER2,....,ER20
C                 AJP  VARIATION OF ERROR INPUT
C 		ESTIMATES OF THE IMAGE ERRORS..USED IN WEIGHTING THE
C 		IMAGES
C 	MINIMAGE
C 		MINIMUM NUMBER OF GOOD IMAGES REQUIRED AT ANY POINT
C 	BADVALUE/ERROR/
C 		ACCESSED IF AN INVALID VALUE IS GIVEN FOR 'ERRORS'
C 	TITLE
C 		TITLE TO REPLACE THE TITLE OF 'IM1' IN THE OUTPUT
C 		IMAGE
C
C CALLS
C 	THIS PACKAGE:
C 		LBGONE,GT2DIR,GTDSCR,GT2DIW,GETCMD,GETPAR,RNGERR,LINSTK,
C 		COMBIN,PTDSCR
C 	STARLINK:
C 		GETDYN,WRERR,RDKEYR,CNPAR,RDKEYC,CYDSCR,FRDATA
C
C NOTES
C 	USES VAX %VAL FACILITY
C
C WRITTEN BY
C     R.F. WARREN-SMITH  AND  A.J. PENNY
C         PENNY VARNS NOTED BY ASTERISK COMMENTS
C ----------------------------------------------------------------------
C
C
      CHARACTER CVAL*1,TITLE(1)*30,METHOD*8,IMGCHR*5
C
C SET MAXIMUM NUMBER OF IMAGES WHICH CAN BE STACKED
C
      PARAMETER (MAXIM=20)
C
C DIMENSION ARRAYS TO HOLD DETAILS OF EACH IMAGE
C
      REAL WEIGHT(MAXIM),SCALE(MAXIM),ZERO(MAXIM),WORK(MAXIM,2)
      INTEGER INVAL(MAXIM),NPIX(MAXIM),NLINES(MAXIM),IP(MAXIM)
C
C INITIALLISE SIZE OF OUTPUT IMAGE
C
      NPOUT=1
      NLOUT=1
C
C COUNT THROUGH EACH POSSIBLE INPUT IMAGE
C
      DO 10 IM=1,MAXIM
C
C FORM THE APPROPRIATE PARAMETER NAME
C
	WRITE(IMGCHR,11)IM
   11   FORMAT('IM',I3)
        CALL LBGONE(IMGCHR(3:))
C
C OBTAIN THE INPUT IMAGE
C
        CALL GT2DIR(IMGCHR,102,(IM.GT.2),NPIX(IM),NLINES(IM),
     +  IP(IM),IERRIM)
C
C IF NO IMAGE WAS OBTAINED, ABORT IF IT WAS ONE OF THE FIRST TWO
C IMAGES. OTHERWISE END THE INPUT LOOP.
C
	IF(IERRIM.NE.0) THEN
	  IF(IM.LE.2) THEN
	    GO TO 99
	  ELSE
	    GO TO 101
	  ENDIF
        ELSE
C
C IF IMAGE WAS OBTAINED SUCCESSFULLY, SET OUTPUT IMAGE SIZE TO THE
C LARGEST IMAGE SO FAR
C
          NPOUT=MAX(NPOUT,NPIX(IM))
	  NLOUT=MAX(NLOUT,NLINES(IM))
C
C STORE THE NECESSARY DESCRIPTOR INFORMATION FROM THE IMAGE
C
	  INVAL(IM)=-100000
	  SCALE(IM)=1.0
          ZERO(IM)=0.0
	  CALL GTDSCR(IMGCHR,'INVAL','INTEGER',INVAL(IM),RVAL,CVAL,
     +	  IERR)
	  CALL GTDSCR(IMGCHR,'BSCALE','REAL',IVAL,SCALE(IM),CVAL,IERR)
          CALL GTDSCR(IMGCHR,'BZERO','REAL',IVAL,ZERO(IM),CVAL,IERR)
        ENDIF
C
C END OF INPUT LOOP:
C
   10 CONTINUE
C
C SET NUMBER OF IMAGES BEING USED AND OBTAIN WORKSPACE
C
  101 IM=IM-1
      CALL GETDYN('LSTACK',102,NPOUT*IM,IPLST,ISTLST)
C
C IF WORKSPACE WAS NOT AVAILABLE, GIVE MESSAGE AND ABORT
C
      IF(ISTLST.NE.0) THEN
	CALL WRERR('NOSPACE')
	GO TO 99
      ENDIF
C
C OBTAIN OUTPUT IMAGE FRAME
C
      CALL GT2DIW('OUT',102,.FALSE.,NPOUT,NLOUT,IPOUT,IERROU)
      IF(IERROU.EQ.0) THEN
C
C OUTPUT IMAGE OBTAINED SUCCESSFULLY...OBTAIN REQUIRED METHOD
C OF COMBINING IMAGES
C
	IMETH=1
	CALL GETCMD('METHOD','MEAN,MEDIAN,MODE,MINIMUM,MAXIMUM.',
     +  1,IMETH,METHOD,LMETH,IERR)
C
C OBTAIN MINIMUM NUMBER OF VALID VALUES REQUIRED AT EACH PIXEL
C
	NMIN=1
	CALL GETPAR('MINIMAGE','INTEGER',1,1.0,REAL(IM),.TRUE.,
     +  NMIN,RVAL,IERR)
C
C SET DEFAULT WEIGHTS FOR IMAGES
C
	DO 61 I=1,IM
	  WEIGHT(I)=1.0
   61	CONTINUE
C
C IF THE METHOD REQUIRES WEIGHTS TO BE ASSIGNED TO EACH IMAGE,
C OBTAIN ERROR ESTIMATES FOR EACH IMAGE
C
*
*  AJP VARIATION
*
	IF((METHOD.EQ.'MEAN').OR.(METHOD.EQ.'MODE')) THEN
	  DO 62 I=1,IM
           WRITE(IMGCHR,63)I
   63      FORMAT('ER',I3)
           CALL LBGONE(IMGCHR(3:))
           CALL RDKEYR(IMGCHR,.TRUE.,1,RVAL,NVAL,IERR)
           WEIGHT(I) = RVAL
           WEIGHT(I) = (1.0/WEIGHT(I))**2
   62	  CONTINUE
      ENDIF
C
C OBTAIN TITLE
C
	TITLE(1)='Output from PSTACK'
	CALL GTDSCR('IM1','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +  IERR)
	CALL RDKEYC('TITLE',.TRUE.,1,TITLE,NVAL,ISTAT)
C
C OBTAIN DESCRIPTOR ITEMS FOR OUTPUT IMAGE
C
	IF(ABS(INVAL(1)).LE.32767) THEN
	  INVALB=INVAL(1)
	ELSE
	  INVALB=-32767
	ENDIF
	BSCALE=SCALE(1)
	BZERO=ZERO(1)
	SCALEF=1.0/SIGN(MAX(1.0E-20,ABS(BSCALE)),BSCALE)
	ZEROL=-BZERO*SCALEF
C
C COUNT THROUGH THE OUTPUT IMAGE LINES
C
	DO 500 J=1,NLOUT
C
C COPY THE CORRESPONDING INPUT LINE OF EACH IMAGE INTO THE WORKSPACE
C USING LINSTK
C
	  DO 498 IMAGE=1,IM
	    CALL LINSTK(%VAL(IP(IMAGE)),NPIX(IMAGE),NLINES(IMAGE),
     +	    INVAL(IMAGE),J,%VAL(IPLST),NPOUT,IMAGE)
  498	  CONTINUE
C
C CALL COMBIN TO COMBINE THE INPUT LINES INTO A SINGLE OUTPUT LINE
C USING THE METHOD SPECIFIED IN IMETH
C
	  CALL COMBIN(%VAL(IPLST),NPOUT,IM,WEIGHT,IMETH,SCALE,ZERO,
     +    INVAL,NMIN,SCALEF,ZEROL,INVALB,J,%VAL(IPOUT),WORK)
  500 	CONTINUE
C
C COPY DESCRIPTOR FROM FIRST INPUT IMAGE TO OUTPUT AND ADD NEW ITEMS
C
	CALL CYDSCR('IM1','OUT',ISTAT)
	CALL PTDSCR('OUT','NAXIS1','INTEGER',NPOUT,RVAL,CVAL,
     +  IERR)
	CALL PTDSCR('OUT','NAXIS2','INTEGER',NLOUT,RVAL,CVAL,
     +	IERR)
	CALL PTDSCR('OUT','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +  IERR)
	CALL PTDSCR('OUT','INVAL','INTEGER',INVALB,RVAL,CVAL,IERR)
	CALL PTDSCR('OUT','BSCALE','REAL',IVAL,BSCALE,CVAL,IERR)
	CALL PTDSCR('OUT','BZERO','REAL',IVAL,BZERO,CVAL,IERR)
      ENDIF
C
C FREE DATA AREAS AND EXIT
C
   99 CALL FRDATA(' ',ISTAT)
C
C
C
      END



