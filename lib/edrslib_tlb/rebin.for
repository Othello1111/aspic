      SUBROUTINE REBIN(IA,NPIXA,NLINEA,INVALA,INVALB,MINX,MAXX,
     +			MINY,MAXY,C,SCALE,MODE,IB,NPIXB,NLINEB,
     +			IERR)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO RESAMPLE AN IMAGE AT POSITIONS GIVEN BY A LINEAR 
*	TRANSFORMATION OF THE OUTPUT PIXEL POSITIONS
*
*METHOD
*	SCAN THE OUTPUT IMAGE, TRANSFORMING THE PIXEL POSITIONS.
*	INTERPOLATE IN THE INPUT IMAGE TO DETERMINE THE IMAGE VALUE
*	AT THESE POINTS. THE ROUTINE USES NEAREST-NEIGHBOUR OR LINEAR
*	INTERPOLATION BETWEEN THE 4 NEAREST PIXELS
*
*ARGUMENTS
*	IA (IN)
*	INTEGER*2(NPIXA,NLINEA)
*		THE INPUT IMAGE
*	NPIXA,NLINEA (IN)
*	INTEGER
*		THE DIMENSIONS OF IA
*	INVALA (IN)
*	INTEGER
*		INVALID PIXEL FLAG FOR IA
*	INVALB (IN)
*	INTEGER
*		INVALID PIXEL FLAG FOR IB
*	MINX,MAXX,MINY,MAXY (IN)
*	INTEGER
*		RANGE OF OUTPUT PIXELS TO BE REPLACED
*	C (IN)
*	REAL(6)
*		COEFFICIENTS GIVING THE TRANSFORMATION FROM OUTPUT
*		POSITIONS TO INPUT POSITIONS
*	SCALE (OUT)
*	REAL
*		SCALE FACTOR WHICH IS NEEDED IF TOTAL IMAGE INTENSITY
*		IS TO BE CONSERVED
*	MODE (IN)
*	INTEGER
*		TYPE OF INTERPOLATION
*		1: NEAREST NEIGHBOUR
*		2: LINEAR
*		3: CONSTANT NOISE
*	IB (IN/OUT)
*	INTEGER*2(NPIXB,NLINEB)
*		OUTPUT IMAGE
*	NPIXB,NLINEB (IN)
*	INTEGER
*		DIMENSIONS OF IB
*	IERR (OUT)
*	INTEGER
*		ERROR FLAG: ZERO FOR SUCCESS
*
*CALLS
*	NONE
*
*NOTES
*	USES INTEGER*2 ARRAYS
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      INTEGER*2 IA(NPIXA,NLINEA),IB(NPIXB,NLINEB)
      INTEGER XMIN,XMAX,YMIN,YMAX,X,Y,XCEN,YCEN
      REAL C(6),WX(-1:+1),WY(-1:+1)
C
C SET UP WEIGHT ARRAYS FOR CONSTANT NOISE INTERPOLATION
C
      DATA WX(0)/1.0/,WY(0)/1.0/
C
C CHECK ARGUMENT VALIDITY
C
      IF(MINX.GT.MAXX) THEN
	IERR=1
      ELSE IF(MINY.GT.MAXY) THEN
	IERR=2
      ELSE
	IERR=0
C
C RESTRICT MAX AND MIN X,Y LIMITS TO LIE IN OUTPUT IMAGE
C
        XMIN=MIN(MAX(1,MINX),NPIXB)
        XMAX=MIN(MAX(1,MAXX),NPIXB)
        YMIN=MIN(MAX(1,MINY),NLINEB)
        YMAX=MIN(MAX(1,MAXY),NLINEB)
C
C RESTRICT INTERPOLATION METHOD TO BE 1 TO 3
C
        METHOD=MIN(MAX(1,MODE),3)
C
C SCALE FACTOR TO CONSERVE COUNTS IS (ABS. VALUE OF DETERMINANT)
C
        SCALE=ABS(C(2)*C(6)-C(3)*C(5))
C
C SCAN THE SELECTED AREA OF THE OUTPUT IMAGE (LOCATION X,Y) AND
C CALCULATE THE TRANSFORMED POSITION (XDASH,YDASH) IN THE INPUT
C IMAGE
C
	DO 12 Y=YMIN,YMAX
	  XREF=C(1)+C(3)*Y
	  YREF=C(4)+C(6)*Y
	  DO 11 X=XMIN,XMAX
	    XDASH=XREF+C(2)*X
	    YDASH=YREF+C(5)*X
C
C FIND NEAREST PIXEL LOCATION
C
	    XCEN=NINT(XDASH)
	    YCEN=NINT(YDASH)
C
C IF NEAREST PIXEL LIES OUTSIDE INPUT IMAGE, OUTPUT PIXEL IS INVALID
C OTHERWISE CONTINUE WITH INTERPOLATION
C
	    IF((XCEN.LT.1).OR.(XCEN.GT.NPIXA).OR.(YCEN.LT.1).OR.
     +	    (YCEN.GT.NLINEA)) THEN
	      IB(X,Y)=INVALB
	    ELSE
C
C FOR NEAREST-NEIGHBOUR INTERPOLATION, OUTPUT PIXEL=NEAREST PIXEL,
C -----------------------------------
C OR IS INVALID IF INPUT PIXEL IS INVALID
C
	      IF(METHOD.EQ.1) THEN
		IF(IA(XCEN,YCEN).EQ.INVALA) THEN
		  IB(X,Y)=INVALB
		ELSE
		  IB(X,Y)=IA(XCEN,YCEN)
		ENDIF
C
C FOR LINEAR INTERPOLATION, OUTPUT PIXEL IS INVALID IF NEAREST INPUT
C ------------------------
C PIXEL IS INVALID. OTHERWISE CONTINUE WITH INTERPOLATION
C
	      ELSE IF(METHOD.EQ.2) THEN
		IF(IA(XCEN,YCEN).EQ.INVALA) THEN
		  IB(X,Y)=INVALB
		ELSE
C
C FIND SHIFT FROM NEXT LOWEST PIXEL,LINE LOCATION
C
		  I=XDASH
		  J=YDASH
		  DX=XDASH-I
		  DY=YDASH-J
C
C INITIALLISE SUMS FOR FORMING WEIGHTED MEAN
C
		  SUM=0.0
		  WTSUM=0.0
C
C FORM WEIGHTED MEAN OF ADJACENT 4 PIXELS, CHECKING THAT EACH LIES
C WITHIN THE INPUT IMAGE AND IS NOT INVALID
C
		  IF(J.GE.1) THEN
		    IF(I.GE.1) THEN
		      IF(IA(I,J).NE.INVALA) THEN
C
C WEIGHT IS CALCULATED FROM THE X,Y SHIFT FROM INTEGER PIXEL LOCATIONS
C
			WT=(1.0-DX)*(1.0-DY)
			SUM=SUM+IA(I,J)*WT
			WTSUM=WTSUM+WT
		      ENDIF
		    ENDIF
		    IF(I+1.LE.NPIXA) THEN
		      IF(IA(I+1,J).NE.INVALA) THEN
			WT=DX*(1.0-DY)
			SUM=SUM+IA(I+1,J)*WT
			WTSUM=WTSUM+WT
		      ENDIF
		    ENDIF
   		  ENDIF
		  IF(J+1.LE.NLINEA) THEN
		    IF(I.GE.1) THEN
		      IF(IA(I,J+1).NE.INVALA) THEN
			WT=(1.0-DX)*DY
			SUM=SUM+IA(I,J+1)*WT
			WTSUM=WTSUM+WT
		      ENDIF
		    ENDIF
		    IF(I+1.LE.NPIXA) THEN
		      IF(IA(I+1,J+1).NE.INVALA) THEN
			WT=DX*DY
			SUM=SUM+IA(I+1,J+1)*WT
			WTSUM=WTSUM+WT
		      ENDIF
		    ENDIF
		  ENDIF
C
C ASSIGN WEIGHTED MEAN TO OUTPUT PIXEL (WTSUM CANNOT BE ZERO, SINCE
C AT LEAST 1 INPUT PIXEL MUST BE VALID)
C
		  IB(X,Y)=NINT(SUM/WTSUM)
		ENDIF
C
C FOR CONSTANT NOISE INTERPOLATION (OUTPUT NOISE INDEPENDENT OF
C --------------------------------
C RESAMPLING PHASE)
C
	      ELSE IF(METHOD.EQ.3) THEN
C
C IF NEAREST PIXEL IS INVALID, SO IS OUTPUT PIXEL. OTHERWISE CONTINUE
C WITH INTERPOLATION
C
		IF(IA(XCEN,YCEN).EQ.INVALA) THEN
		  IB(X,Y)=INVALB
		ELSE
C
C CALCULATE THE SHIFT FROM THE LEXT LOWEST PIXEL,LINE POSITION
C
		  I=XDASH
		  J=YDASH
		  DX=XDASH-I
		  DY=YDASH-J
C
C CALCULATE THE X AND Y WEIGHT ARRAYS (DEPENDENT ON THE PHASE DX,DY)
C
		  R1=DX*DX+0.25
		  R2=DY*DY+0.25
		  WX(-1)=R1-DX
		  WX(1)=R1+DX
		  WY(-1)=R2-DY
		  WY(1)=R2+DY
C
C NOW SCAN THE 9 NEAREST PIXELS, FORMING A WEIGHTED SUM OF ALL THE
C VALID ONES
C
		  SUM=0.0
		  WTSUM=0.0
		  DO 22 JSHIFT=-1,1
		    JJ=J+JSHIFT
C
C CHECK WE ARE STILL IN THE IMAGE
C
		    IF(JJ.GE.1.AND.JJ.LE.NLINEA) THEN
		      DO 21 ISHIFT=-1,1
			II=I+ISHIFT
			IF(II.GE.1.AND.II.LE.NPIXA) THEN
C
C INCLUDE THE PIXEL IF IT IS VALID
C
			  IF(IA(II,JJ).NE.INVALA) THEN
			    WT=WX(ISHIFT)*WY(JSHIFT)
			    SUM=SUM+IA(II,JJ)*WT
			    WTSUM=WTSUM+WT
			  ENDIF
			ENDIF
   21		      CONTINUE
		    ENDIF
   22		  CONTINUE
C
C ASSIGN THE INTERPOLATED VALUE TO THE OUTPUT PIXEL
C
		  IB(X,Y)=NINT(SUM/WTSUM)
		ENDIF
	      ENDIF
	    ENDIF
   11 	  CONTINUE
   12   CONTINUE
      ENDIF
      RETURN
      END
