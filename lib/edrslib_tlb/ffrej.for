      SUBROUTINE FFREJ(IA,NPIX,NLINES,INVALA,NITER,GAMMA,IX,IY,
     +		       ILEVEL,SCALE,SIGMA,IB,INVALB,NGOOD,ISTOR,
     +		       NSTOR,ILINE,NLINE)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO REJECT DEFECTS IN A SUBSTANTIALLY SMOOTH IMAGE
*
*METHOD
*	SMOOTH THE IMAGE USING A RECTANGULAR FILTER AND FORM A NOISE
*	ESTIMATE BASED ON A COMPARISON OF THE ORIGINAL IMAGE WITH THE
*	SMOOTHED VERSION. REJECT PIXELS WHICH DEVIATE FROM THE SMOOTHED
*	VERSION BY MORE THAN A DETERMINED NUMBER OF STANDARD DEVIATIONS
*	ITERATE, SMOOTHING THE MOST RECENT REJECTED IMAGE EACH TIME.
*
*ARGUMENTS
*	IA (IN)
*	INTEGER*2(NPIX,NLINES)
*		THE INPUT IMAGE
*	NPIX,NLINES (IN)
*	INTEGER
*		THE DIMENSIONS OF THE IMAGE
*	INVALA (IN)
*	INTEGER
*		THE INVALID PIXEL FLAG FOR THE INPUT IMAGE
*	NITER (IN)
*	INTEGER
*		THE NUMBER OF REJECTION ITERATIONS REQUIRED
*	GAMMA (IN)
*	REAL
*		THE NUMBER OF STANDARD DEVIATIONS AT WHICH REJECTION
*		OCCURS
*	IX,IY (IN)
*	INTEGER
*		THE SIZE OF THE FILTER RECTANGLE TO BE USED
*	ILEVEL (IN)
*	INTEGER
*		THE INTERACTION LEVEL CONTROLLING THE PRINTING OF
*		RESULTS
*	SCALE (IN)
*	REAL
*		THE SCALE FACTOR FOR THE INPUT IMAGE
*	SIGMA (OUT)
*	REAL
*		RETURNS AN ESTIMATE OF THE RMS NOISE PER PIXEL IN THE
*		OUTPUT IMAGE
*	IB (OUT)
*	INTEGER*2(NPIX,NLINES)
*		THE OUTPUT IMAGE
*	INVALB (IN)
*	INTEGER
*		THE INVALID PIXEL FLAG FOR THE OUTPUT IMAGE
*	NGOOD (OUT)
*	INTEGER
*		RETURNS THE NUMBER OF VALID PIXELS REMAINING IN THE
*		OUTPUT IMAGE
*	ISTOR (WORKSPACE)
*	INTEGER(NPIX*NLINES)
*		INTERMEDIATE STORAGE
*	NSTOR (WORKSPACE)
*	INTEGER*2(NPIX*NLINES)
*		INTERMEDIATE STORAGE
*	ILINE (WORKSPACE)
*	INTEGER(NPIX)
*		INTERMEDIATE STORAGE
*	NLINE (WORKSPACE)
*	INTEGER*2(NPIX)
*		INTERMEDIATE STORAGE
*
*CALLS
*	THIS PACKAGE:
*		LBGONE,IMGBOX
*	STARLINK:
*		WRUSER
*
*NOTES
*	USES INTEGER*2 ARRAYS
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      INTEGER*2 IA(NPIX*NLINES),IB(NPIX*NLINES),NSTOR(NPIX*NLINES),
     +          NLINE(NPIX)
      INTEGER ISTOR(NPIX*NLINES),ILINE(NPIX)
      CHARACTER PRBUF*80
C
C Q0 IS THE SMALLEST VALUE THAT THE VARIANCE OF A PIXEL CAN TAKE..
C SET IT TO BE ABOUT EQUAL TO THE QUANTISATION ERROR
C
      PARAMETER (Q0=0.25)
C
C MAKE THE SIDES OF THE FILTER AREA ODD
C
      IDX=MAX(0,IX/2)
      IDY=MAX(0,IY/2)
      IIX=2*IDX+1
      IIY=2*IDY+1
C
C SET THRESHOLD FOR REQUIRED NUMBER OF VALID PIXELS PER BOX TO
C 0.25* BOX AREA
C
      NMIN=MAX((IIX*IIY)/4,1)
C
C COPY INPUT IMAGE TO OUTPUT MATRIX, COUNTING THE NUMBER OF VALID
C PIXELS
C
      NN=NPIX*NLINES
      NSTART=0
      DO 1 I=1,NN
	IF(IA(I).NE.INVALA) THEN
	  IB(I)=IA(I)
	  NSTART=NSTART+1
	ELSE
	  IB(I)=INVALB
	ENDIF
    1 CONTINUE
C
C IF ILEVEL IS GE 2, TELL THE USER HOW MANY GOOD PIXELS THERE ARE
C
      IF(ILEVEL.GE.2) THEN
	WRITE(PRBUF,10)NSTART
   10   FORMAT('     IMAGE INITIALLY HAS',I10,' VALID PIXEL(S)')
        CALL LBGONE(PRBUF(26:))
	CALL WRUSER(' ',ISTAT)
	CALL WRUSER(PRBUF,ISTAT)
      ENDIF
C
C IF THERE ARE NO VALID PIXELS, EXIT WITH ERROR STATUS
C
      IF(NSTART.LE.0) THEN
	NGOOD=-1
	GO TO 99
      ENDIF
C
C PERFORM THE REJECTION ITERATIONS
C --------------------------------
C
      DO 66 ITER=1,NITER
C
C SMOOTH THE IMAGE USING IMGBOX TO APPLY A RECTANGULAR FILTER
C
	CALL IMGBOX(IB,NPIX,NLINES,INVALB,IIX,IIY,NMIN,ISTOR,NSTOR,
     +  ILINE,NLINE)
C
C ON THE FIRST ITERATION, COMPARE THE SMOOTHED IMAGE WITH THE ORIGINAL
C AND DERIVE A NOISE ESTIMATE
C
	IF(ITER.EQ.1) THEN
	  SIG=0.0
	  NGOOD=0
	  DO 2 I=1,NN
C
C USE ONLY THOSE PIXELS VALID IN BOTH IMAGES
C
	    IF(IA(I).NE.INVALA) THEN
	      IF(IB(I).NE.INVALB) THEN
		NA=IA(I)
		NB=IB(I)
		DIFF=NA-NB
		SIG=SIG+DIFF*DIFF
		NGOOD=NGOOD+1
	      ENDIF
	    ENDIF
    2     CONTINUE
	  IF(NGOOD.GE.1) THEN
	    VAR=MAX(SIG/NGOOD,Q0)
	  ELSE
	    VAR=Q0
	  ENDIF
C
C SET THRESHOLD FOR THE SQUARED DEVIATIONS AT GAMMA STANDARD DEVIATIONS
C
	  THRESH=GAMMA*GAMMA*VAR
	ENDIF
C
C NOW COPY THE INPUT IMAGE TO THE OUTPUT MATRIX, REJECTING PIXELS
C OUTSIDE THE THRESHOLD
C
	SIG=0.0
	NGOOD=0
	DO 3 I=1,NN
C
C ACCEPT ONLY THOSE PIXELS VALID IN BOTH IMAGES
C
 	  IF(IA(I).NE.INVALA) THEN
	    IF(IB(I).NE.INVALB) THEN
	      NA=IA(I)
	      NB=IB(I)
	      DIFF=NA-NB
	      DIFF2=DIFF*DIFF
	      IF(DIFF2.LE.THRESH) THEN
C
C FORM A NEW NOISE ESTIMATE AT THE SAME TIME
C
		IB(I)=IA(I)
		SIG=SIG+DIFF2
		NGOOD=NGOOD+1
	      ELSE
	        IB(I)=INVALB
	      ENDIF
	    ENDIF
	  ELSE
	    IB(I)=INVALB
	  ENDIF
    3   CONTINUE
C
C EVALUATE THE NOISE ESTIMATE
C
	IF(NGOOD.GE.1) THEN
	  VAR=MAX(SIG/NGOOD,Q0)
	ELSE
	  VAR=Q0
	ENDIF
C
C SET NEW REJECTION THRESHOLD
C
	THRESH=GAMMA*GAMMA*VAR
C
C IF ILEVEL GE 2, SHOW THE USER THE PROGRESS OF THE ITERATIONS
C
	SIGMA=SCALE*SQRT((VAR*IIX*IIY)/(MAX(1,IIX*IIY-1)))
	IF(ILEVEL.GE.2) THEN
	  WRITE(PRBUF,11)ITER,NGOOD,SIGMA
   11     FORMAT('     ITERATION ',I3,':',I10,
     +    ' VALID PIXEL(S) : SIGMA=',SS,G11.4)
	  CALL WRUSER(PRBUF,ISTAT)
	ENDIF
C
C IF ALL PIXELS HAVE BEEN REJECTED, ABORT
C
	IF(NGOOD.LE.0) THEN
	  GO TO 99
	ENDIF
   66 CONTINUE
C
C IF ILEVEL GE 2, SHOW HOW MANY PIXELS WERE REJECTED AFTER ALL
C ITERATIONS ARE COMPLETE
C
      IF(ILEVEL.GE.2) THEN
	NREJ=NSTART-NGOOD
	WRITE(PRBUF,12) NREJ
   12   FORMAT('     ',I10,' PIXEL(S) REJECTED IN TOTAL')
	CALL WRUSER(' ',ISTAT)
	CALL WRUSER(PRBUF,ISTAT)
	CALL WRUSER(' ',ISTAT)
      ENDIF
   99 RETURN
      END
