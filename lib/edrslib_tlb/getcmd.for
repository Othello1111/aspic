      SUBROUTINE GETCMD(NAME,CMDLST,IREPLY,NCOMM,IDCOMM,
     +                  LENCOM,IERR)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO OBTAIN CHARACTER PARAMETERS FROM THE ENVIRONMENT, CHECK
*	THEIR VALIDITY AND HANDLE ANY ERRORS WHICH OCCUR
*
*METHOD
*	EXTRACT THE DEFAULT VALUE FROM THE INPUT LIST OF ALTERNATIVES.
*	OBTAIN A VALUE FROM THE ENVIRONMENT. IF OBTAINED OK, CALL
*	CMDWRD TO CHECK ITS VALIDITY AGAINST THE LIST OF ALTERNATIVES.
*	IF VALID, USE IT, OTHERWISE PROMPT FOR A NEW VALUE.
*
*ARGUMENTS
*	NAME (IN)
*	CHARACTER*(*)
*		THE NAME OF THE PARAMETER TO BE OBTAINED
*	CMDLST (IN)
*	CHARACTER*(*)
*		A LIST OF ALTERNATIVE VALID PARAMETER VALUES, SEPARATED
*		BY COMMAS AND TERMINATED WITH A FULL STOP.
*	IREPLY (IN)
*	INTEGER
*		IF SET TO 1 OR MORE, THE ROUTINE ISSUES HELPFUL MESSAGES
*		TO THE USER IF ERRONEOUS VALUES ARE ENTERED
*	NCOMM (IN/OUT)
*	INTEGER
*		ON ENTRY, SPECIFIES THE POSITION IN THE LIST 'CMDLST'
*		OF THE DEFAULT VALUE FOR THE PARAMETER. ON EXIT, GIVES
*		THE POSITION OF THE VALUE OBTAINED FROM THE ENVIRONMENT
*	IDCOMM (OUT)
*	CHARACTER*(*)
*		THE FULL FORM OF THE VALUE OBTAINED FROM THE ENVIRONMENT
*	LENCOM (OUT)
*	INTEGER
*		THE NUMBER OF NON-BLANK CHARACTERS IN IDCOMM
*	IERR (OUT)
*	INTEGER
*		ERROR FLAG: ZERO FOR SUCCESS
*
*STARLINK PARAMETERS
*	'NAME'
*		PARAMETER NAME TO BE OBTAINED IS GIVEN IN THE ARGUMENT
*		'NAME'
*	BADCMD/ERROR/
*		ACCESSED IF AN INVALID VALUE IS GIVEN FOR THE PARAMETER
*	AMBIGCMD/ERROR/
*		ACCESSED IF AN AMBIGUOUS ABBREVIATION IS USED FOR
*		THE PARAMETER
*	TOOBAD/ERROR/
*		ACCESSED IF THE MAXIMUM PERMISSIBLE NUMBER OF INVALID
*		VALUES HAS BEEN GIVEN AND THE ROUTINE IS TO USE THE
*		DEFAULT VALUE
*
*CALLS
*	THIS PACKAGE:
*		NINDEX,CMDWRD
*	STARLINK:
*		RDKEYC,WRERR,WRUSER,CNPAR
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      CHARACTER NAME*(*),CMDLST*(*),IDCOMM*(*),CMD(1)*80
      LOGICAL EXIT
      INTEGER START,END,ENDLST,CERR
C
C SET MAX. NUMBER OF ERRONEOUS ENTRIES ALLOWED
C
      PARAMETER (MAXWNG=4)
      IERR=0
      NWRONG=0
C
C FIND THE BEGINNING AND END OF THE DEFAULT PARAMETER VALUE IN THE
C INPUT LIST
C
      START=NINDEX(CMDLST,',',NCOMM-1)+1
      ENDLST=NINDEX(CMDLST,'.',1)-1
      END=MIN(NINDEX(CMDLST,',',NCOMM)-1,ENDLST)
      LENGTH=END-START+1
C
C IF IT HAS ZERO LENGTH, ABORT WITH IERR=1
C
      IF(LENGTH.LE.0) THEN
        IERR=1
      ELSE
C
C SET DEFAULT VALUE, THEN OBTAIN NEW VALUE FROM THE ENVIRONMENT
C
   67     CMD(1)=CMDLST(START:END)
          CALL RDKEYC(NAME,.TRUE.,1,CMD,NVALS,KEYERR)
C
C IF PARAMETER NAME IS INVALID, EXIT WITH IERR=2
C
          IF(KEYERR.EQ.4) THEN
            IERR=2
            NWRONG=0
            EXIT=.TRUE.
C
C IF NULL WAS ENTERED, USE THE DEFAULT VALUE
C
          ELSE IF(KEYERR.EQ.1) THEN
            IDCOMM=CMDLST(START:END)
            LENCOM=LENGTH
            NWRONG=0
            EXIT=.TRUE.
          ELSE
C
C IF VALUE WAS ENTERED SUCCESSFULLY, CALL CMDWRD TO IDENTIFY IT
C
            CALL CMDWRD(CMDLST(:ENDLST),CMD(1),
     +      NINPUT,NID,IDCOMM,LENCOM,CERR)
C
C IF THE INPUT WAS BLANK, USE THE DEFAULT
C
            IF(CERR.EQ.4) THEN
              IDCOMM=CMDLST(START:END)
              LENCOM=LENGTH
	      NWRONG=0
              EXIT=.TRUE.
C
C IF NOT A VALID VALUE, GIVE MESSAGE AND RETURN FOR A NEW VALUE
C
            ELSE IF(CERR.EQ.3) THEN
              CALL WRERR('BADCMD')
              NWRONG=NWRONG+1
              EXIT=.FALSE.
C
C IF AN AMBIGUOUS ABBREVIATION, GIVE MESSAGE AND RETURN FOR A NEW
C VALUE
C
            ELSE IF(CERR.EQ.2) THEN
	      CALL WRERR('AMBIGCMD')
              NWRONG=NWRONG+1
              EXIT=.FALSE.
            ELSE
C
C OTHERWISE OK...
C
              NWRONG=0
              EXIT=.TRUE.
	      NCOMM=NID
C
C IF MIS-TYPED, GIVE MESSAGE, BUT CONTINUE
C
              IF(CERR.EQ.1) THEN
		IF(IREPLY.GE.1) THEN
		  CALL WRUSER(' ***'''//CMD(1)(:NINPUT)//
     +		  ''' IS NOT VALID',ISTAT)
		  CALL WRUSER(' ***ASSUMING YOU MEAN '''//
     +		  IDCOMM(:LENCOM)//'''',ISTAT)
		ENDIF
              ENDIF
	    ENDIF
	  ENDIF
C
C IF PARAMETER WAS BAD, BUT MAX NUMBER OF BAD ENTRIES HAS NOT BEEN
C REACHED, GIVE MESSAGE SHOWING THE VALID VALUES
C
	  IF(NWRONG.LT.MAXWNG) THEN
	    IF(NWRONG.GT.0) THEN
	      IF(IREPLY.GE.1) THEN
		CALL WRUSER(' ***VALID VALUES ARE: '//CMDLST(:ENDLST),
     +		ISTAT)
	      ENDIF
	    ENDIF
	  ELSE
C
C IF MAX. NUMBER OF BAD ENTRIES HAS BEEN REACHED, GIVE MESSAGE AND USE
C THE DEFAULT
C
	    IDCOMM=CMDLST(START:END)
	    LENCOM=LENGTH
	    CALL WRERR('TOOBAD')
	    IF(IREPLY.GE.1) THEN
	      CALL WRUSER(' ***DEFAULTING TO '''//IDCOMM(:LENCOM)//
     +	      '''',ISTAT)
            ENDIF
	    GO TO 99
	  ENDIF
C
C IF A NEW VALUE IS NEEDED, CANCEL OLD VALUE AND RETURN FOR A NEW ONE
C
	  IF(.NOT.EXIT) THEN
	    CALL CNPAR(NAME,ISTAT)
	    GO TO 67
	  ENDIF
      ENDIF
   99 RETURN
      END
