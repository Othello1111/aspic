      SUBROUTINE STACK
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO COMBINE MUTUALLY ALIGNED AND NORMALISED IMAGES INTO A
*	SINGLE OUTPUT IMAGE
*
*METHOD
*	OBTAIN EACH INPUT IMAGE AND EXTRACT THE REQUIRED DESCRIPTOR
*	ITEMS. OBTAIN AN OUTPUT IMAGE. TREAT EACH LINE IN TURN...
*	COPY ONE LINE FROM EACH IMAGE INTO WORKSPACE USING LINSTK, THEN
*	COMBINE THEM INTO A SINGLE OUTPUT LINE USING COMBIN. WHEN ALL
*	LINES HAVE BEEN TREATED, UPDATE THE OUTPUT DESCRIPTOR ITEMS
*
*ARGUMENTS
*	NONE
*
*STARLINK PARAMETERS
*	IMAGE1,IMAGE2...IMAGE20
*		THE INPUT IMAGES
*	NOSPACE/ERROR/
*		ACCESSED IF WORKSPACE CANNOT BE OBTAINED
*	OUTPUT
*		THE OUTPUT IMAGE
*	METHOD
*		THE METHOD OF COMBINING THE IMAGES
*	ERRORS
*		ESTIMATES OF THE IMAGE ERRORS..USED IN WEIGHTING THE
*		IMAGES
*	MINIMAGE
*		MINIMUM NUMBER OF GOOD IMAGES REQUIRED AT ANY POINT
*	BADVALUE/ERROR/
*		ACCESSED IF AN INVALID VALUE IS GIVEN FOR 'ERRORS'
*	TITLE
*		TITLE TO REPLACE THE TITLE OF 'IMAGE1' IN THE OUTPUT
*		IMAGE
*
*CALLS
*	THIS PACKAGE:
*		LBGONE,GT2DIR,GTDSCR,GT2DIW,GETCMD,GETPAR,RNGERR,LINSTK,
*		COMBIN,PTDSCR
*	STARLINK:
*		GETDYN,WRERR,RDKEYR,CNPAR,RDKEYC,CYDSCR,FRDATA
*
*NOTES
*	USES VAX %VAL FACILITY
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      CHARACTER CVAL*1,TITLE(1)*30,METHOD*8,IMGCHR*8
C
C SET MAXIMUM NUMBER OF IMAGES WHICH CAN BE STACKED
C
      PARAMETER (MAXIM=20)
C
C DIMENSION ARRAYS TO HOLD DETAILS OF EACH IMAGE
C
      REAL WEIGHT(MAXIM),SCALE(MAXIM),ZERO(MAXIM),WORK(MAXIM,2)
      INTEGER INVAL(MAXIM),NPIX(MAXIM),NLINES(MAXIM),IP(MAXIM)
C
C INITIALLISE SIZE OF OUTPUT IMAGE
C
      NPOUT=1
      NLOUT=1
C
C COUNT THROUGH EACH POSSIBLE INPUT IMAGE
C
      DO 10 IM=1,MAXIM
C
C FORM THE APPROPRIATE PARAMETER NAME
C
	WRITE(IMGCHR,11)IM
   11   FORMAT('IMAGE',I3)
        CALL LBGONE(IMGCHR(6:))
C
C OBTAIN THE INPUT IMAGE
C
        CALL GT2DIR(IMGCHR,102,(IM.GT.2),NPIX(IM),NLINES(IM),
     +  IP(IM),IERRIM)
C
C IF NO IMAGE WAS OBTAINED, ABORT IF IT WAS ONE OF THE FIRST TWO
C IMAGES. OTHERWISE END THE INPUT LOOP.
C
	IF(IERRIM.NE.0) THEN
	  IF(IM.LE.2) THEN
	    GO TO 99
	  ELSE
	    GO TO 101
	  ENDIF
        ELSE
C
C IF IMAGE WAS OBTAINED SUCCESSFULLY, SET OUTPUT IMAGE SIZE TO THE
C LARGEST IMAGE SO FAR
C
          NPOUT=MAX(NPOUT,NPIX(IM))
	  NLOUT=MAX(NLOUT,NLINES(IM))
C
C STORE THE NECESSARY DESCRIPTOR INFORMATION FROM THE IMAGE
C
	  INVAL(IM)=-100000
	  SCALE(IM)=1.0
          ZERO(IM)=0.0
	  CALL GTDSCR(IMGCHR,'INVAL','INTEGER',INVAL(IM),RVAL,CVAL,
     +	  IERR)
	  CALL GTDSCR(IMGCHR,'BSCALE','REAL',IVAL,SCALE(IM),CVAL,IERR)
          CALL GTDSCR(IMGCHR,'BZERO','REAL',IVAL,ZERO(IM),CVAL,IERR)
        ENDIF
C
C END OF INPUT LOOP:
C
   10 CONTINUE
C
C SET NUMBER OF IMAGES BEING USED AND OBTAIN WORKSPACE
C
  101 IM=IM-1
      CALL GETDYN('LSTACK',102,NPOUT*IM,IPLST,ISTLST)
C
C IF WORKSPACE WAS NOT AVAILABLE, GIVE MESSAGE AND ABORT
C
      IF(ISTLST.NE.0) THEN
	CALL WRERR('NOSPACE')
	GO TO 99
      ENDIF
C
C OBTAIN OUTPUT IMAGE FRAME
C
      CALL GT2DIW('OUTPUT',102,.FALSE.,NPOUT,NLOUT,IPOUT,IERROU)
      IF(IERROU.EQ.0) THEN
C
C OUTPUT IMAGE OBTAINED SUCCESSFULLY...OBTAIN REQUIRED METHOD
C OF COMBINING IMAGES
C
	IMETH=1
	CALL GETCMD('METHOD','MEAN,MEDIAN,MODE,MINIMUM,MAXIMUM.',
     +  1,IMETH,METHOD,LMETH,IERR)
C
C OBTAIN MINIMUM NUMBER OF VALID VALUES REQUIRED AT EACH PIXEL
C
	NMIN=1
	CALL GETPAR('MINIMAGE','INTEGER',1,1.0,REAL(IM),.TRUE.,
     +  NMIN,RVAL,IERR)
C
C SET DEFAULT WEIGHTS FOR IMAGES
C
	DO 61 I=1,IM
	  WEIGHT(I)=1.0
   61	CONTINUE
C
C IF THE METHOD REQUIRES WEIGHTS TO BE ASSIGNED TO EACH IMAGE,
C OBTAIN ERROR ESTIMATES FOR EACH IMAGE
C
	IF((METHOD.EQ.'MEAN').OR.(METHOD.EQ.'MODE')) THEN
   64     CALL RDKEYR('ERRORS',.TRUE.,IM,WEIGHT,NVAL,ISTAT)
C
C CONVERT ERRORS TO WEIGHTS
C
	  DO 62 I=1,IM
	    IF(WEIGHT(I).LT.1.0E-10.OR.WEIGHT(I).GT.1.0E10) THEN
C
C IF ANY ERROR ESTIMATE WAS INVALID, GIVE MESSAGE AND RETURN
C FOR NEW ENTRY
C
	      CALL WRERR('BADVALUE')
	      CALL RNGERR('***ALL VALUES','REAL',1.0E-10,1.0E10)
	      CALL CNPAR('ERRORS',ISTAT)
	      GO TO 64
	    ELSE
	      WEIGHT(I)=(1.0/WEIGHT(I))**2
	    ENDIF
   62	  CONTINUE
        ENDIF
C
C OBTAIN TITLE
C
	TITLE(1)=' '
	CALL GTDSCR('IMAGE1','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +  IERR)
	CALL RDKEYC('TITLE',.TRUE.,1,TITLE,NVAL,ISTAT)
C
C OBTAIN DESCRIPTOR ITEMS FOR OUTPUT IMAGE
C
	IF(ABS(INVAL(1)).LE.32767) THEN
	  INVALB=INVAL(1)
	ELSE
	  INVALB=-32767
	ENDIF
	BSCALE=SCALE(1)
	BZERO=ZERO(1)
	SCALEF=1.0/SIGN(MAX(1.0E-20,ABS(BSCALE)),BSCALE)
	ZEROL=-BZERO*SCALEF
C
C COUNT THROUGH THE OUTPUT IMAGE LINES
C
	DO 500 J=1,NLOUT
C
C COPY THE CORRESPONDING INPUT LINE OF EACH IMAGE INTO THE WORKSPACE
C USING LINSTK
C
	  DO 498 IMAGE=1,IM
	    CALL LINSTK(%VAL(IP(IMAGE)),NPIX(IMAGE),NLINES(IMAGE),
     +	    INVAL(IMAGE),J,%VAL(IPLST),NPOUT,IMAGE)
  498	  CONTINUE
C
C CALL COMBIN TO COMBINE THE INPUT LINES INTO A SINGLE OUTPUT LINE
C USING THE METHOD SPECIFIED IN IMETH
C
	  CALL COMBIN(%VAL(IPLST),NPOUT,IM,WEIGHT,IMETH,SCALE,ZERO,
     +    INVAL,NMIN,SCALEF,ZEROL,INVALB,J,%VAL(IPOUT),WORK)
  500 	CONTINUE
C
C COPY DESCRIPTOR FROM FIRST INPUT IMAGE TO OUTPUT AND ADD NEW ITEMS
C
	CALL CYDSCR('IMAGE1','OUTPUT',ISTAT)
	CALL PTDSCR('OUTPUT','NAXIS1','INTEGER',NPOUT,RVAL,CVAL,
     +  IERR)
	CALL PTDSCR('OUTPUT','NAXIS2','INTEGER',NLOUT,RVAL,CVAL,
     +	IERR)
	CALL PTDSCR('OUTPUT','TITLE','CHARACTER',IVAL,RVAL,TITLE(1),
     +  IERR)
	CALL PTDSCR('OUTPUT','INVAL','INTEGER',INVALB,RVAL,CVAL,IERR)
	CALL PTDSCR('OUTPUT','BSCALE','REAL',IVAL,BSCALE,CVAL,IERR)
	CALL PTDSCR('OUTPUT','BZERO','REAL',IVAL,BZERO,CVAL,IERR)
      ENDIF
C
C FREE DATA AREAS AND RETURN
C
   99 CALL FRDATA(' ',ISTAT)
      RETURN
      END
