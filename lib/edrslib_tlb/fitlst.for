      SUBROUTINE FITLST(LISTA,NITEMA,LLENA,LISTB,NITEMB,LLENB,
     +                  MAXIT,GAMMA,IFIT,ILEVEL,C,
     +      		IDA,XA,YA,IDB,XB,YB,VALID,IERR)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO CONTROL THE FITTING OF A LINEAR TRANSFORMATION BETWEEN
*	TWO SETS OF X,Y POSITIONS AND TO DISPLAY THE RESULTS
*
*METHOD
*	EXTRACT THE X,Y POSITIONS AND IDENTIFIERS FROM THE INPUT LISTS
*	AND MATCH THEM TOGETHER USING XYMTCH. CALL XYFITR TO PERFORM
*	THE FITTING, THEN DISPLAY A TABLE OF RESULTS.
*
*ARGUMENTS
*	LISTA (IN)
*	INTEGER(NITEMA,LLENA)
*		THE FIRST INPUT LIST OF X,Y POSITIONS
*	NITEMA,LLENA (IN)
*	INTEGER
*		THE DIMENSIONS OF LISTA
*	LISTB (IN)
*	INTEGER(NITEMB,LLENB)
*		THE SECOND INPUT LIST OF X,Y POSITIONS
*	NITEMB,LLENB (IN)
*	INTEGER
*		THE DIMENSIONS OF LISTB
*	MAXIT (IN)
*	INTEGER
*		THE MAXIMUM NUMBER OF REJECTION ITERATIONS TO BE
*		PERFORMED BY THE FITTING ROUTINE XYFITR
*	GAMMA (IN)
*	REAL
*		THE NUMBER OF STANDARD DEVIATIONS AT WHICH ABERRANT
*		POINTS ARE REJECTED IN XYFITR
*	IFIT (IN)
*	INTEGER
*		AN INTEGER DEFINING THE TYPE OF LINEAR TRANSFORMATION
*		CALCULATED BY XYFITR
*	ILEVEL (IN)
*	INTEGER
*		INTERACTION LEVEL, CONTROLLING THE PRINTING OF RESULTS
*	C (OUT)
*	REAL(6)
*		RETURNS THE 6 TRANSFORMATION COEFFICIENTS
*	IDA (WORKSPACE)
*	BYTE(20,LLENA)
*		STORAGE FOR THE IDENTIFIERS
*	XA,YA (WORKSPACE)
*	REAL(LLENA)
*		STORAGE FOR X,Y POSITIONS
*	IDB (WORKSPACE)
*	BYTE(20,LLENB)
*		STORAGE FOR IDENTIFIERS
*	XB,YB (WORKSPACE)
*	REAL(LLENB)
*		STORAGE FOR X,Y POSITIONS
*	VALID (WORKSPACE)
*	LOGICAL(*)
*		USED TO HOLD FLAGS INDICATING WHICH POINTS WERE REJECTED
*		DURING FITTING. SHOULD BE AT LEAST MIN(LLENA,LLENB)
*		ELEMENTS LONG
*	IERR (OUT)
*	INTEGER
*		ERROR STATUS RETURN... ZERO INDICATES SUCCESS
*
*CALLS
*	THIS PACKAGE:
*		EXTLST,XYMTCH,XYFITR
*	STARLINK:
*		WRUSER
*
*NOTES
*	USES BYTE ARRAYS
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      INTEGER LISTA(NITEMA,LLENA),LISTB(NITEMB,LLENB)
      REAL XA(LLENA),YA(LLENA),XB(LLENB),YB(LLENB),C(6)
      LOGICAL VALID(*)
      BYTE IDA(20,LLENA),IDB(20,LLENB)
      CHARACTER PRBUF*80,FITMSG(4)*80
C
C SET UP INFORMATION MESSAGES TO INDICATE THE FIT USED
C
      DATA FITMSG(1)/'   TRANSFORMATION IS A SHIFT OF ORIGIN ONLY'/,
     +	   FITMSG(2)/'   TRANSFORMATION IS A SHIFT AND ROTATION'/,
     +     FITMSG(3)/
     +     '   TRANSFORMATION IS A SHIFT,ROTATION AND MAGNIFICATION'/,
     +     FITMSG(4)/
     +     '   TRANSFORMATION IS A FULL 6 PARAMETER FIT'/
C
C EXTRACT IDENTIFIERS AND X,Y POSITIONS FROM THE INPUT LISTS
C
      IERR=0
      CALL EXTLST(LISTA,NITEMA,LLENA,IDA,1,20)
      CALL EXTLST(LISTA,NITEMA,LLENA,XA,21,24)
      CALL EXTLST(LISTA,NITEMA,LLENA,YA,25,28)
      CALL EXTLST(LISTB,NITEMB,LLENB,IDB,1,20)
      CALL EXTLST(LISTB,NITEMB,LLENB,XB,21,24)
      CALL EXTLST(LISTB,NITEMB,LLENB,YB,25,28)
C
C CALL XYMTCH TO MATCH THE ID'S IN EACH LIST AND PUT THE MATCHED
C POSITIONS AT THE START OF THE ID,X,Y ARRAYS
C
      CALL XYMTCH(XA,YA,IDA,LLENA,XB,YB,IDB,LLENB,NMTCH,ISTAT)
C
C IF NO MATCHES WERE FOUND, RETURN WITH IERR=1
C
      IF(NMTCH.LE.0) THEN
	IERR=1
	GO TO 99
      ENDIF
C
C SET ALL MATCHED POSITIONS AS VALID, THEN CALL XYFITR TO PERFORM
C THE FITTING
C
      DO 1 I=1,NMTCH
	VALID(I)=.TRUE.
    1 CONTINUE
      CALL XYFITR(XA,YA,XB,YB,VALID,NMTCH,MAXIT,GAMMA,IFIT,C,IERR)
C
C PRINT NUMBER OF MATCHED POSITIONS
C
      IF(ILEVEL.GE.2) THEN
	CALL WRUSER(' ',ISTAT)
	WRITE(PRBUF,10)NMTCH
   10   FORMAT(3X,I8,' POSITION(S) MATCHED BETWEEN INPUT LISTS')
        CALL LBGONE(PRBUF(4:))
        CALL WRUSER(PRBUF,ISTAT)
      ENDIF
C
C IF TABLE OF RESULTS IS NEEDED, PRINT HEADINGS
C
      IF(ILEVEL.GE.3) THEN
	CALL WRUSER(' ',ISTAT)
	WRITE(PRBUF,11)
   11   FORMAT(3X,'TRANSFORMED A POSITION',12X,'B POSITION')
        CALL WRUSER(PRBUF,ISTAT)
	WRITE(PRBUF,12)
   12   FORMAT(3X,'----------------------',12X,'----------')
	CALL WRUSER(PRBUF,ISTAT)
	WRITE(PRBUF,13)
   13   FORMAT(2X,2(' X COORD.      Y COORD.     '),3X,
     +  'ALIGNMENT ERROR')
        CALL WRUSER(PRBUF,ISTAT)
	WRITE(PRBUF,14)
   14   FORMAT(2X,2(' --------      --------     '),3X,
     +  '---------------')
	CALL WRUSER(PRBUF,ISTAT)
      ENDIF
C
C CALCULATE RMS ERROR AND COUNT NUMBER OF POSITIONS REJECTED
C
      IF(ILEVEL.GE.2) THEN
	NREJ=0
	SIGMA=0.0
	DO 66 I=1,NMTCH
C
C CALCULATE TRANSFORMED 'A' POSITIONS AND ERROR
C
	  XD=C(1)+C(2)*XA(I)+C(3)*YA(I)
	  YD=C(4)+C(5)*XA(I)+C(6)*YA(I)
	  ERRSQ=(XD-XB(I))**2+(YD-YB(I))**2
	  ERR=SQRT(ERRSQ)
	  IF(VALID(I)) THEN
C
C INCREASE SUM OF ERRORS AND PRINT RESULT IF REQUIRED
C
	    SIGMA=SIGMA+ERRSQ
	    IF(ILEVEL.GE.3) WRITE(PRBUF,15)XD,YD,XB(I),YB(I),ERR,'OK'
	  ELSE
C
C COUNT ONE REJECTED POINT AND PRINT RESULT IF REQUIRED
C
	    NREJ=NREJ+1
	    IF(ILEVEL.GE.3) WRITE(PRBUF,15)XD,YD,XB(I),YB(I),ERR,'REJ'
	  ENDIF
   15     FORMAT(1X,4(1X,SS,G13.6),4X,SS,G12.4,2X,A3)
          IF(ILEVEL.GE.3) CALL WRUSER(PRBUF,ISTAT)
   66   CONTINUE
C
C CALCULATE RMS ERROR AND PRINT NO. OF REJECTED POINTS AND RMS ERROR
C
	IF(NREJ.LT.NMTCH) THEN
	  SIGMA=SQRT(SIGMA/(NMTCH-NREJ))
	ELSE
	  SIGMA=0.0
	ENDIF
	CALL WRUSER(' ',ISTAT)
	WRITE(PRBUF,16) NREJ
   16	FORMAT(3X,I8,' POSITION(S) REJECTED')
        CALL LBGONE(PRBUF(4:))
	CALL WRUSER(PRBUF,ISTAT)
	CALL WRUSER(' ',ISTAT)
	WRITE(PRBUF,17) SIGMA
   17   FORMAT(3X,'RMS ALIGNMENT ERROR=',SS,G11.4)
	CALL WRUSER(PRBUF,ISTAT)
	CALL WRUSER(' ',ISTAT)
C
C PRINT MESSAGE SHOWING TYPE OF FIT USED
C
	CALL WRUSER(FITMSG(IFIT),ISTAT)
	CALL WRUSER(' ',ISTAT)
C
C FINALLY PRINT THE TRANSFORMATION COEFFICIENTS
C
	WRITE(PRBUF,18)
   18   FORMAT(3X,'TRANSFORMATION COEFFICIENTS:')
	CALL WRUSER(PRBUF,ISTAT)
	CALL WRUSER(' ',ISTAT)
	DO 44 J=1,4,3
	  WRITE(PRBUF,19)((L,C(L)),L=J,J+2)
   19	  FORMAT(10X,3('C(',I1,')=',SS,G13.6,2X))
	  CALL WRUSER(PRBUF,ISTAT)
   44   CONTINUE
	CALL WRUSER(' ',ISTAT)
      ENDIF
   99 RETURN
      END
