      SUBROUTINE LINTRN(XA,YA,XB,YB,OK,N,C,IFIT,IERR)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO OBTAIN A LINEAR TRANSFORMATION BETWEEN 2 SETS OF X,Y
*	POSITIONS WITH LEAST SQUARED ERROR.
*
*METHOD
*	SET UP THE NORMAL EQUATIONS CORRESPONDING TO THE TYPE OF FIT
*	REQUIRED. SOLVE NORMAL EQUATIONS TO GIVE THE TRANSFORMATION.
*	IF SUCCESSFUL, EXIT. OTHERWISE REDUCE THE NUMBER OF DEGREES
*	OF FREEDOM IN THE FIT AND REPEAT.
*
*ARGUMENTS
*	XA,YA (IN)
*	REAL(N)
*		THE FIRST SET OF X,Y POSITIONS WHICH ARE TO BE
*		TRANSFORMED
*	XB,YB (IN)
*	REAL(N)
*		THE SECOND (REFERENCE) SET OF POSITIONS
*	OK (IN)
*	LOGICAL(N)
*		A SET OF LOGICAL FLAGS INDICATING WHICH POSITIONS ARE
*		TO BE USED
*	N (IN)
*	INTEGER
*		THE SIZE OF ARRAYS XA,YA,XB,YB,OK
*	C (OUT)
*	REAL(6)
*		THE SIX COEFFICIENTS DEFINING THE TRANSFORMATION
*	IFIT (IN/OUT)
*	INTEGER
*		THE TYPE OF FIT REQUIRED:
*		1:SHIFT OF ORIGIN
*		2:SHIFT AND ROTATION
*		3:SHIFT, ROTATION AND MAGNIFICATION
*		4:FULL 6 PARAMETER TRANSFORMATION
*		IFIT MAY BE REDUCED ON OUTPUT IF THE SPECIFIED FIT
*		WAS NOT OBTAINED
*	IERR (OUT)
*	INTEGER
*		ERROR FLAG: ZERO FOR SUCCESS
*
*CALLS
*	NAG LIBRARY:
*		F04AEF
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      REAL XA(N),YA(N),XB(N),YB(N),C(6)
      DOUBLE PRECISION A(4,4),B(4,2),ANS(4,2),WKSPCE(4),AA(4,4),BB(4,2)
      LOGICAL OK(N)
C
C CHECK VALIDITY OF ARGUMENTS
C
      IERR=0
      IF(N.LT.1) THEN
	IERR=1
      ELSE
C
C IS AT LEAST 1 POSITION VALID?
C
	SW=0.0
	DO 10 I=1,N
	  IF(OK(I)) SW=SW+1.0
   10	CONTINUE
	IF(SW.LE.0.0) THEN
	  IERR=2
	ELSE
C
C OK...SET TYPE OF FIT REQUIRED BETWEEN 1 AND 4
C
	  IFIT=MIN(MAX(1,IFIT),4)
C
C CHECK THAT THE FIT DOES NOT HAVE TOO MANY DEGREES OF FREEDOM FOR
C THE NUMBER OF DATA POINTS AVAILABLE
C
	  NPTS=NINT(SW)
	  IF(NPTS.LE.2) IFIT=MIN(IFIT,3)
	  IF(NPTS.LE.1) IFIT=1
C
C INITIALLISE SUMS FOR NORMAL EQUATIONS
C
	  SWX=0.0
	  SWY=0.0
	  SWXY=0.0
	  SWX2=0.0
	  SWY2=0.0
	  SWXD=0.0
	  SWYD=0.0
	  SWXXD=0.0
	  SWYYD=0.0
	  SWXYD=0.0
	  SWYXD=0.0
C
C FORM SUMS, SETTING WEIGHT TO ZERO FOR INVALID POSITIONS
C
	  DO 20 I=1,N
	    IF(OK(I)) THEN
	      W=1.0
	    ELSE
	      W=0.0
	    ENDIF
	    WX=W*XA(I)
	    WY=W*YA(I)
	    SWX=SWX+WX
	    SWY=SWY+WY
	    SWXD=SWXD+W*XB(I)
	    SWYD=SWYD+W*YB(I)
C
C IF FIT ONLY REQUIRES A SHIFT OF ORIGIN, FURTHER SUMS ARE NOT
C REQUIRED
C
	    IF(IFIT.NE.1) THEN
	      SWXY=SWXY+WX*YA(I)
	      SWX2=SWX2+WX*XA(I)
	      SWY2=SWY2+WY*YA(I)
	      SWXXD=SWXXD+WX*XB(I)
	      SWXYD=SWXYD+WX*YB(I)
	      SWYXD=SWYXD+WY*XB(I)
	      SWYYD=SWYYD+WY*YB(I)
	    ENDIF
   20	  CONTINUE
C
C ITERATE UP TO 4 TIMES, REDUCING IFIT BY 1 EACH TIME
C
	  IFIT=IFIT+1
	  DO 60 ITRY=1,4
	    IFIT=IFIT-1
C
C SHIFT OF ORIGIN ONLY: EQUATIONS SIMPLY SOLVED
C --------------------
C
	    IF(IFIT.EQ.1) THEN
	      C(1)=(SWXD-SWX)/SW
	      C(2)=1.0
	      C(3)=0.0
	      C(4)=(SWYD-SWY)/SW
	      C(5)=0.0
	      C(6)=1.0
	      IFAIL=0
C
C SHIFT OF ORIGIN AND ROTATION
C ----------------------------
	    ELSE IF(IFIT.EQ.2) THEN
C
C CALCULATE THE CENTROIDS OF EACH SET OF POSITIONS
C
	      XD0=SWXD/SW
	      YD0=SWYD/SW
	      X0=SWX/SW
	      Y0=SWY/SW
C
C INITIALLISE STORAGE FOR NEW SUMS
C
	      SWYXD0=0.0
	      SWXYD0=0.0
	      SWXXD0=0.0
	      SWYYD0=0.0
C
C FORM NEW SUMS, USING THE DEVIATIONS FROM THE CENTROIDS
C
	      DO 146 I=1,N
		IF(OK(I)) THEN
		  SWYXD0=SWYXD0+(YA(I)-Y0)*(XB(I)-XD0)
		  SWXYD0=SWXYD0+(XA(I)-X0)*(YB(I)-YD0)
		  SWXXD0=SWXXD0+(XA(I)-X0)*(XB(I)-XD0)
		  SWYYD0=SWYYD0+(YA(I)-Y0)*(YB(I)-YD0)
		ENDIF
  146	      CONTINUE
C
C IF THE ROTATION ANGLE IS NOT DEFINED, IFAIL=1
C
	      TOP=SWYXD0-SWXYD0
	      BOT=SWYYD0+SWXXD0
	      IF(TOP.EQ.0.0.AND.BOT.EQ.0.0) THEN
		IFAIL=1
	      ELSE
C
C OTHERWISE CALCULATE THE ROTATION ANGLE ABOUT THE CENTROIDS
C AND ASSIGN THE RESULTS TO THE TRANSFORM COEFFICIENTS
C
		THETA=ATAN2(TOP,BOT)
		C(1)=XD0-(X0*COS(THETA)+Y0*SIN(THETA))
		C(2)=COS(THETA)
		C(3)=SIN(THETA)
		C(4)=YD0-(-X0*SIN(THETA)+Y0*COS(THETA))
		C(5)=-SIN(THETA)
		C(6)=COS(THETA)
		IFAIL=0
	      ENDIF
C
C SHIFT, ROTATION AND MAGNIFICATION: SET UP NORMAL EQUATIONS
C ---------------------------------
C
	    ELSE IF(IFIT.EQ.3) THEN
	      A(1,1)=SW
	      A(1,2)=SWX
	      A(1,3)=SWY
	      A(1,4)=0.0D0
	      A(2,1)=SWX
	      A(2,2)=SWX2+SWY2
	      A(2,3)=0.0D0
	      A(2,4)=SWY
	      A(3,1)=SWY
	      A(3,2)=0.0D0
	      A(3,3)=SWX2+SWY2
	      A(3,4)=-SWX
	      A(4,1)=0.0D0
	      A(4,2)=SWY
              A(4,3)=-SWX
	      A(4,4)=SW
	      B(1,1)=SWXD
	      B(2,1)=SWXXD+SWYYD
	      B(3,1)=SWYXD-SWXYD
	      B(4,1)=SWYD
C
C CALL NAG ROUTINE F04AEF TO SOLVE THE LINEAR NORMAL EQUATIONS
C
	      IFAIL=1
	      CALL F04AEF(A,4,B,4,4,1,ANS,4,WKSPCE,AA,4,BB,4,IFAIL)
C
C IF SUCCESSFUL, ASSIGN RESULT TO THE TRANSFORMATION COEFFICIENTS
C
	      IF(IFAIL.EQ.0) THEN
		C(1)=ANS(1,1)
		C(2)=ANS(2,1)
		C(3)=ANS(3,1)
		C(4)=ANS(4,1)
		C(5)=-ANS(3,1)
		C(6)=ANS(2,1)
	      ENDIF
C
C FULL FIT REQUIRED: SET UP NORMAL EQUATIONS
C -----------------
C
	    ELSE IF(IFIT.EQ.4) THEN
	      A(1,1)=SW
	      A(1,2)=SWX
	      A(1,3)=SWY
	      A(2,1)=SWX
	      A(2,2)=SWX2
	      A(2,3)=SWXY
	      A(3,1)=SWY
	      A(3,2)=SWXY
	      A(3,3)=SWY2
	      B(1,1)=SWXD
	      B(2,1)=SWXXD
	      B(3,1)=SWYXD
	      B(1,2)=SWYD
	      B(2,2)=SWXYD
	      B(3,2)=SWYYD
C
C CALL NAG ROUTINE F04AEF TO SOLVE LINEAR NORMAL EQUATIONS
C
	      IFAIL=1
	      CALL F04AEF(A,4,B,4,3,2,ANS,4,WKSPCE,AA,4,BB,4,IFAIL)
C
C IF SUCCESSFUL, ASSIGN RESULTS TO TRANSFORMATION COEFFICIENTS
C
	      IF(IFAIL.EQ.0) THEN
		C(1)=ANS(1,1)
		C(2)=ANS(2,1)
		C(3)=ANS(3,1)
		C(4)=ANS(1,2)
		C(5)=ANS(2,2)
		C(6)=ANS(3,2)
	      ENDIF
	    ENDIF
C
C IF A FIT WAS SUCCESSFULLY OBTAINED THIS TIME, EXIT FROM ITERATION
C LOOP. OTHERWISE TRY AGAIN WITH IFIT REDUCED BY 1
C
	    IF(IFAIL.EQ.0) GO TO 70
   60	  CONTINUE
   70	  CONTINUE
	ENDIF
      ENDIF
      RETURN
      END
