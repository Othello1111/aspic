      SUBROUTINE XYFITR(XA,YA,XB,YB,OK,N,MAXIT,GAMMA,IFIT,C,IERR)
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*PURPOSE
*	TO FIND A LEAST-SQUARES LINEAR TRANSFORMATION BETWEEN TWO SETS
*	OF X,Y POSITIONS, REJECTING ERRONEOUS DATA.
*
*METHOD
*	CALL LINTRN TO OBTAIN A LEAST-SQUARES FIT. CALCULATE THE RMS
*	MIS-ALIGNMENT AND THE MOST MIS-ALIGNED DATA POINT. REJECT THE
*	WORST POINT IF IT EXCEEDS A THRESHOLD BASED ON THE RMS ERROR.
*	REPEAT FOR A PRESET NUMBER OF ITERATIONS, OR UNTIL NO FURTHER
*	POINTS ARE REJECTED
*
*ARGUMENTS
*	XA,YA (IN)
*	REAL(N)
*		THE FIRST SET OF POSITIONS TO BE TRANSFORMED
*	XB,YB (IN)
*	REAL(N)
*		THE SECOND SET OF REFERENCE POSITIONS
*	OK (IN/OUT)
*	LOGICAL(N)
*		FLAGS TO INDICATE WHICH DATA POINTS HAVE NOT BEEN
*		REJECTED
*	N (IN)
*	INTEGER
*		NUMBER OF DATA POINTS
*	MAXIT (IN)
*	INTEGER
*		MAX. NUMBER OF REJECTION ITERATIONS
*	GAMMA (IN)
*	REAL
*		NUMBER OF STANDARD DEVIATIONS AT WHICH ABERRANT POINTS
*		ARE REJECTED
*	IFIT (IN/OUT)
*	INTEGER
*		FLAG WHICH INDICATES THE TYPE OF LINEAR TRANSFORMATION
*		USED... SERVES THE SAME PURPOSE AS IN LINTRN
*	C (OUT)
*	REAL(6)
*		THE COEFFICIENTS DEFINING THE TRANSFORMATION
*	IERR (OUT)
*	INTEGER
*		ERROR FLAG: ZERO FOR SUCCESS
*
*CALLS
*	THIS PACKAGE:
*		LINTRN
*
*WRITTEN BY
*	R.F. WARREN-SMITH
*-----------------------------------------------------------------------
C
C
      REAL XA(N),YA(N),XB(N),YB(N),C(6)
      LOGICAL OK(N),REJECT
C
C INITIALLISE ITERATION COUNT AND LOOP WHILE POINTS WERE REJECTED LAST
C ITERATION
C
      ITER=0
      REJECT=.TRUE.
   63 IF(REJECT) THEN
C
C CALL LINTRN TO FIND THE LINEAR TRANSFORMATION BETWEEN THE 2 SETS
C OF X,Y POSITIONS
C
	CALL LINTRN(XA,YA,XB,YB,OK,N,C,IFIT,IERR)
C
C QUIT IF ERROR, OR MAX ITERATIONS EXCEEDED
C
	IF((IERR.EQ.0).AND.(ITER.LT.MAXIT)) THEN
C
C COUNT 1 ITERATION AND INITIALLISE REJECTED POINTS FLAG
C
	  ITER=ITER+1
	  REJECT=.FALSE.
C
C INITIALLISE COUNTERS FOR FINDING STANDARD DEVIATION AND MAXIMUM
C MIS-ALIGNMENT
C
	  VARSUM=0.0
	  NGOOD=0
	  ERRMAX=-1.0
C
C SCAN ALL POINTS NOT REJECTED SO FAR
C
	  DO 2 I=1,N
	    IF(OK(I)) THEN
C
C CALCULATE THE MIS-ALIGNMENT
C
	      XD=C(1)+C(2)*XA(I)+C(3)*YA(I)
	      YD=C(4)+C(5)*XA(I)+C(6)*YA(I)
	      ERRSQ=(XB(I)-XD)**2+(YB(I)-YD)**2
	      VARSUM=VARSUM+ERRSQ
	      NGOOD=NGOOD+1
C
C FIND THE MAXIMUM MIS-ALIGNMENT
C
	      IF(ERRSQ.GT.ERRMAX) THEN
		ERRMAX=ERRSQ
		IMAX=I
	      ENDIF
	    ENDIF
    2 	  CONTINUE
C
C FIND THE RMS MIS-ALIGNMENT AND REJECT THE WORST POINT IF IT IS MORE
C THAN GAMMA STD. DEVS. OUT
C
	  IF(NGOOD.GT.0) THEN
	    VAR=VARSUM/NGOOD
	    IF((VAR.GT.0.0).AND.(ERRMAX.GT.VAR*(GAMMA**2))) THEN
	      OK(IMAX)=.FALSE.
	      REJECT=.TRUE.
	    ENDIF
	  ENDIF
	  GO TO 63
	ENDIF
      ENDIF
      RETURN
      END
