	SUBROUTINE CRB_STATS
      INTEGER IDIMN(99)
      LOGICAL QUIET,RMS
      CHARACTER*40 MESS
      CHARACTER*3 DIGITS
 
      INCLUDE 'INTERIM(FMTPAR)'
 
      DATA DIGITS/'123'/
 
*  GET THE IMAGE
      CALL RDIMAG('IMAGE',FMT_R,99,IDIMN,NDIMS,IPIN,JSTAT)
 
*  DETERMINE WHETHER TO OPERATE QUIETLY
      CALL RDKEYL('QUIET',.FALSE.,1,QUIET,I,JSTAT)
*
*  DECIDE WHETHER TO CALCULATE STD DEVIATION
*
      CALL RDKEYL('RMS',.FALSE.,1,RMS,I,JSTAT)
 
 
*  REPORT DIMENSIONS & DETERMINE TOTAL NUMBER OF PIXELS
      NELS=1
      CALL WRKEYI('NAXIS',NDIMS,1,JSTAT)
      DO I=1,NDIMS
         ID=IDIMN(I)
         WRITE (MESS,'('' DIM'',I2,''  ='',I5)') I,ID
         IF (.NOT.QUIET) CALL WRUSER(MESS,JSTAT)
         IF (I.LE.3) THEN
            CALL WRKEYI('NAXIS'//DIGITS(I:I),ID,1,JSTAT)
         ENDIF
         NELS=NELS*ID
      END DO
 
*  DETERMINE TOTAL, MEAN, MIN, MAX
      CALL STATS(%VAL(IPIN),NELS,RIT,RIM,RIMIN,RIMAX,RMS,STDEV)
 
*  REPORT
      WRITE (MESS,'('' TOTAL  ='',G14.6)') RIT
      IF (.NOT.QUIET) CALL WRUSER(MESS,JSTAT)
      CALL WRKEYR('TOTAL',RIT,1,JSTAT)
      WRITE (MESS,'(''  MEAN  ='',G14.6)') RIM
      IF (.NOT.QUIET) CALL WRUSER(MESS,JSTAT)
      CALL WRKEYR('MEAN',RIM,1,JSTAT)
      WRITE (MESS,'(''   MIN  ='',G14.6)') RIMIN
      IF (.NOT.QUIET) CALL WRUSER(MESS,JSTAT)
      CALL WRKEYR('MIN',RIMIN,1,JSTAT)
      WRITE (MESS,'(''   MAX  ='',G14.6)') RIMAX
      IF (.NOT.QUIET) CALL WRUSER(MESS,JSTAT)
      CALL WRKEYR('MAX',RIMAX,1,JSTAT)
 
*  TELL OUTSIDE WORLD ESTIMATED -1 & +7 SIGMA FOR DISPLAY PURPOSES
      SIG=SQRT(MAX(RIM,0.0))
      SIGM1=RIM-SIG
      SIGP7=RIM+7.0*SIG
      CALL WRKEYR('SIGM1',SIGM1,1,JSTAT)
      CALL WRKEYR('SIGP7',SIGP7,1,JSTAT)
 
*
*  IF CALCULATED THEN OUTPUT STD DEVIATION
*
      IF(RMS)  THEN
         IF(.NOT.QUIET) THEN
            WRITE(MESS,'('' STD DEVIATION ='',G14.6)') STDEV
            CALL WRUSER(MESS,JSTAT)
         ENDIF
         CALL WRKEYR('STDEV',STDEV,1,JSTAT)
      ENDIF
 
*  WRAP UP
      CALL FRDATA(' ',JSTAT)
 
	CALL CNPAR('IMAGE',JSTAT)
      END
